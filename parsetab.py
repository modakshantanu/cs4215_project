
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDErightUNARYANY ARROW ASSIGN BOOL BOOL_LIT BREAK COLON COMMA CONTINUE DIVIDE ELSE IDEN IF LET L_BRC L_PAR MINUS MULTIPLY MULTI_COMMENT NUMBER NUM_LIT PLUS RETURN R_BRC R_PAR SEMI SINGLE_COMMENT STRING STR_LIT WHILE\n    program : block\n    \n    type : NUMBER\n         | BOOL\n         | STRING \n         | ANY\n    \n    block : statement \n          | statement block    \n    \n    statement : expression SEMI \n              | IDEN ASSIGN expression SEMI\n              | LET IDEN SEMI\n              | LET IDEN COLON type SEMI\n              | LET IDEN ASSIGN expression SEMI\n              | LET IDEN COLON type ASSIGN expression SEMI\n              | RETURN expression SEMI\n              | IF L_PAR expression R_PAR statement ELSE statement\n              | IF L_PAR expression R_PAR statement\n              | WHILE L_PAR expression R_PAR statement\n              | L_BRC block R_BRC\n              | BREAK SEMI\n              | CONTINUE SEMI\n    \n    expression : binary_operation\n               | unary_operation\n               | L_PAR expression R_PAR\n               | NUM_LIT\n               | BOOL_LIT\n               | STR_LIT\n               | function_call\n               | lambda\n               | IDEN\n\n    \n     binary_operation : expression PLUS expression \n                     | expression MINUS expression\n                     | expression MULTIPLY expression\n                     | expression DIVIDE expression\n    \n     unary_operation : PLUS expression %prec UNARY\n              | MINUS expression %prec UNARY\n    \n    arg_list : expression \n             | expression COMMA arg_list\n    \n    param_list : IDEN COMMA param_list\n               | IDEN\n    \n    function_call : expression L_PAR R_PAR\n                  | expression L_PAR arg_list R_PAR\n    \n    lambda : L_PAR R_PAR ARROW L_BRC block R_BRC\n           | L_PAR param_list R_PAR ARROW L_BRC block R_BRC\n           | L_PAR IDEN R_PAR ARROW L_BRC block R_BRC\n    '
    
_lr_action_items = {'IDEN':([0,3,6,7,9,11,21,22,24,25,26,27,28,29,30,34,39,41,42,53,55,56,62,64,65,67,74,75,80,82,83,84,85,87,88,89,91,95,96,],[5,5,31,33,38,5,33,33,-8,33,33,33,33,33,33,33,33,-19,-20,-10,33,-14,78,-18,33,-9,5,5,5,-11,33,-12,-16,5,5,-17,5,-13,-15,]),'LET':([0,3,11,24,41,42,53,56,64,67,74,75,80,82,84,85,87,88,89,91,95,96,],[6,6,6,-8,-19,-20,-10,-14,-18,-9,6,6,6,-11,-12,-16,6,6,-17,6,-13,-15,]),'RETURN':([0,3,11,24,41,42,53,56,64,67,74,75,80,82,84,85,87,88,89,91,95,96,],[7,7,7,-8,-19,-20,-10,-14,-18,-9,7,7,7,-11,-12,-16,7,7,-17,7,-13,-15,]),'IF':([0,3,11,24,41,42,53,56,64,67,74,75,80,82,84,85,87,88,89,91,95,96,],[8,8,8,-8,-19,-20,-10,-14,-18,-9,8,8,8,-11,-12,-16,8,8,-17,8,-13,-15,]),'WHILE':([0,3,11,24,41,42,53,56,64,67,74,75,80,82,84,85,87,88,89,91,95,96,],[10,10,10,-8,-19,-20,-10,-14,-18,-9,10,10,10,-11,-12,-16,10,10,-17,10,-13,-15,]),'L_BRC':([0,3,11,24,41,42,53,56,59,64,67,74,75,76,77,80,82,84,85,87,88,89,91,95,96,],[11,11,11,-8,-19,-20,-10,-14,75,-18,-9,11,11,87,88,11,-11,-12,-16,11,11,-17,11,-13,-15,]),'BREAK':([0,3,11,24,41,42,53,56,64,67,74,75,80,82,84,85,87,88,89,91,95,96,],[12,12,12,-8,-19,-20,-10,-14,-18,-9,12,12,12,-11,-12,-16,12,12,-17,12,-13,-15,]),'CONTINUE':([0,3,11,24,41,42,53,56,64,67,74,75,80,82,84,85,87,88,89,91,95,96,],[13,13,13,-8,-19,-20,-10,-14,-18,-9,13,13,13,-11,-12,-16,13,13,-17,13,-13,-15,]),'L_PAR':([0,3,4,5,7,8,9,10,11,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,32,33,34,35,38,39,41,42,43,44,45,46,47,48,49,50,52,53,55,56,57,58,63,64,65,66,67,73,74,75,80,82,83,84,85,87,88,89,90,91,92,95,96,97,98,],[9,9,29,-29,9,34,9,39,9,-21,-22,-24,-25,-26,-27,-28,9,9,-8,9,9,9,9,9,9,29,-29,9,29,-29,9,-19,-20,-34,-35,-30,-31,-32,-33,29,-40,29,-10,9,-14,29,-23,29,-18,9,-41,-9,29,9,9,9,-11,9,-12,-16,9,9,-17,29,9,-42,-13,-15,-43,-44,]),'NUM_LIT':([0,3,7,9,11,21,22,24,25,26,27,28,29,30,34,39,41,42,53,55,56,64,65,67,74,75,80,82,83,84,85,87,88,89,91,95,96,],[16,16,16,16,16,16,16,-8,16,16,16,16,16,16,16,16,-19,-20,-10,16,-14,-18,16,-9,16,16,16,-11,16,-12,-16,16,16,-17,16,-13,-15,]),'BOOL_LIT':([0,3,7,9,11,21,22,24,25,26,27,28,29,30,34,39,41,42,53,55,56,64,65,67,74,75,80,82,83,84,85,87,88,89,91,95,96,],[17,17,17,17,17,17,17,-8,17,17,17,17,17,17,17,17,-19,-20,-10,17,-14,-18,17,-9,17,17,17,-11,17,-12,-16,17,17,-17,17,-13,-15,]),'STR_LIT':([0,3,7,9,11,21,22,24,25,26,27,28,29,30,34,39,41,42,53,55,56,64,65,67,74,75,80,82,83,84,85,87,88,89,91,95,96,],[18,18,18,18,18,18,18,-8,18,18,18,18,18,18,18,18,-19,-20,-10,18,-14,-18,18,-9,18,18,18,-11,18,-12,-16,18,18,-17,18,-13,-15,]),'PLUS':([0,3,4,5,7,9,11,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,32,33,34,35,38,39,41,42,43,44,45,46,47,48,49,50,52,53,55,56,57,58,63,64,65,66,67,73,74,75,80,82,83,84,85,87,88,89,90,91,92,95,96,97,98,],[21,21,25,-29,21,21,21,-21,-22,-24,-25,-26,-27,-28,21,21,-8,21,21,21,21,21,21,25,-29,21,25,-29,21,-19,-20,-34,-35,-30,-31,-32,-33,25,-40,25,-10,21,-14,25,-23,25,-18,21,-41,-9,25,21,21,21,-11,21,-12,-16,21,21,-17,25,21,-42,-13,-15,-43,-44,]),'MINUS':([0,3,4,5,7,9,11,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,32,33,34,35,38,39,41,42,43,44,45,46,47,48,49,50,52,53,55,56,57,58,63,64,65,66,67,73,74,75,80,82,83,84,85,87,88,89,90,91,92,95,96,97,98,],[22,22,26,-29,22,22,22,-21,-22,-24,-25,-26,-27,-28,22,22,-8,22,22,22,22,22,22,26,-29,22,26,-29,22,-19,-20,-34,-35,-30,-31,-32,-33,26,-40,26,-10,22,-14,26,-23,26,-18,22,-41,-9,26,22,22,22,-11,22,-12,-16,22,22,-17,26,22,-42,-13,-15,-43,-44,]),'$end':([1,2,3,23,24,41,42,53,56,64,67,82,84,85,89,95,96,],[0,-1,-6,-7,-8,-19,-20,-10,-14,-18,-9,-11,-12,-16,-17,-13,-15,]),'R_BRC':([3,23,24,40,41,42,53,56,64,67,82,84,85,86,89,93,94,95,96,],[-6,-7,-8,64,-19,-20,-10,-14,-18,-9,-11,-12,-16,92,-17,97,98,-13,-15,]),'SEMI':([4,5,12,13,14,15,16,17,18,19,20,31,32,33,43,44,45,46,47,48,50,52,58,66,68,69,70,71,72,73,90,92,97,98,],[24,-29,41,42,-21,-22,-24,-25,-26,-27,-28,53,56,-29,-34,-35,-30,-31,-32,-33,-40,67,-23,-41,82,-2,-3,-4,-5,84,95,-42,-43,-44,]),'MULTIPLY':([4,5,14,15,16,17,18,19,20,32,33,35,38,43,44,45,46,47,48,49,50,52,57,58,63,66,73,90,92,97,98,],[27,-29,-21,-22,-24,-25,-26,-27,-28,27,-29,27,-29,-34,-35,27,27,-32,-33,27,-40,27,27,-23,27,-41,27,27,-42,-43,-44,]),'DIVIDE':([4,5,14,15,16,17,18,19,20,32,33,35,38,43,44,45,46,47,48,49,50,52,57,58,63,66,73,90,92,97,98,],[28,-29,-21,-22,-24,-25,-26,-27,-28,28,-29,28,-29,-34,-35,28,28,-32,-33,28,-40,28,28,-23,28,-41,28,28,-42,-43,-44,]),'ASSIGN':([5,31,68,69,70,71,72,],[30,55,83,-2,-3,-4,-5,]),'R_PAR':([9,14,15,16,17,18,19,20,29,33,35,37,38,43,44,45,46,47,48,49,50,51,57,58,63,66,78,79,81,92,97,98,],[36,-21,-22,-24,-25,-26,-27,-28,50,-29,58,60,61,-34,-35,-30,-31,-32,-33,-36,-40,66,74,-23,80,-41,-39,-38,-37,-42,-43,-44,]),'COMMA':([14,15,16,17,18,19,20,33,38,43,44,45,46,47,48,49,50,58,66,78,92,97,98,],[-21,-22,-24,-25,-26,-27,-28,-29,62,-34,-35,-30,-31,-32,-33,65,-40,-23,-41,62,-42,-43,-44,]),'ELSE':([24,41,42,53,56,64,67,82,84,85,89,95,96,],[-8,-19,-20,-10,-14,-18,-9,-11,-12,91,-17,-13,-15,]),'COLON':([31,],[54,]),'ARROW':([36,60,61,],[59,76,77,]),'NUMBER':([54,],[69,]),'BOOL':([54,],[70,]),'STRING':([54,],[71,]),'ANY':([54,],[72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,3,11,75,87,88,],[2,23,40,86,93,94,]),'statement':([0,3,11,74,75,80,87,88,91,],[3,3,3,85,3,89,3,3,96,]),'expression':([0,3,7,9,11,21,22,25,26,27,28,29,30,34,39,55,65,74,75,80,83,87,88,91,],[4,4,32,35,4,43,44,45,46,47,48,49,52,57,63,73,49,4,4,4,90,4,4,4,]),'binary_operation':([0,3,7,9,11,21,22,25,26,27,28,29,30,34,39,55,65,74,75,80,83,87,88,91,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'unary_operation':([0,3,7,9,11,21,22,25,26,27,28,29,30,34,39,55,65,74,75,80,83,87,88,91,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'function_call':([0,3,7,9,11,21,22,25,26,27,28,29,30,34,39,55,65,74,75,80,83,87,88,91,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'lambda':([0,3,7,9,11,21,22,25,26,27,28,29,30,34,39,55,65,74,75,80,83,87,88,91,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'param_list':([9,62,],[37,79,]),'arg_list':([29,65,],[51,81,]),'type':([54,],[68,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','gradscript_parse.py',15),
  ('type -> NUMBER','type',1,'p_type','gradscript_parse.py',21),
  ('type -> BOOL','type',1,'p_type','gradscript_parse.py',22),
  ('type -> STRING','type',1,'p_type','gradscript_parse.py',23),
  ('type -> ANY','type',1,'p_type','gradscript_parse.py',24),
  ('block -> statement','block',1,'p_block','gradscript_parse.py',33),
  ('block -> statement block','block',2,'p_block','gradscript_parse.py',34),
  ('statement -> expression SEMI','statement',2,'p_statement','gradscript_parse.py',46),
  ('statement -> IDEN ASSIGN expression SEMI','statement',4,'p_statement','gradscript_parse.py',47),
  ('statement -> LET IDEN SEMI','statement',3,'p_statement','gradscript_parse.py',48),
  ('statement -> LET IDEN COLON type SEMI','statement',5,'p_statement','gradscript_parse.py',49),
  ('statement -> LET IDEN ASSIGN expression SEMI','statement',5,'p_statement','gradscript_parse.py',50),
  ('statement -> LET IDEN COLON type ASSIGN expression SEMI','statement',7,'p_statement','gradscript_parse.py',51),
  ('statement -> RETURN expression SEMI','statement',3,'p_statement','gradscript_parse.py',52),
  ('statement -> IF L_PAR expression R_PAR statement ELSE statement','statement',7,'p_statement','gradscript_parse.py',53),
  ('statement -> IF L_PAR expression R_PAR statement','statement',5,'p_statement','gradscript_parse.py',54),
  ('statement -> WHILE L_PAR expression R_PAR statement','statement',5,'p_statement','gradscript_parse.py',55),
  ('statement -> L_BRC block R_BRC','statement',3,'p_statement','gradscript_parse.py',56),
  ('statement -> BREAK SEMI','statement',2,'p_statement','gradscript_parse.py',57),
  ('statement -> CONTINUE SEMI','statement',2,'p_statement','gradscript_parse.py',58),
  ('expression -> binary_operation','expression',1,'p_expression','gradscript_parse.py',92),
  ('expression -> unary_operation','expression',1,'p_expression','gradscript_parse.py',93),
  ('expression -> L_PAR expression R_PAR','expression',3,'p_expression','gradscript_parse.py',94),
  ('expression -> NUM_LIT','expression',1,'p_expression','gradscript_parse.py',95),
  ('expression -> BOOL_LIT','expression',1,'p_expression','gradscript_parse.py',96),
  ('expression -> STR_LIT','expression',1,'p_expression','gradscript_parse.py',97),
  ('expression -> function_call','expression',1,'p_expression','gradscript_parse.py',98),
  ('expression -> lambda','expression',1,'p_expression','gradscript_parse.py',99),
  ('expression -> IDEN','expression',1,'p_expression','gradscript_parse.py',100),
  ('binary_operation -> expression PLUS expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',119),
  ('binary_operation -> expression MINUS expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',120),
  ('binary_operation -> expression MULTIPLY expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',121),
  ('binary_operation -> expression DIVIDE expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',122),
  ('unary_operation -> PLUS expression','unary_operation',2,'p_unary_operation','gradscript_parse.py',129),
  ('unary_operation -> MINUS expression','unary_operation',2,'p_unary_operation','gradscript_parse.py',130),
  ('arg_list -> expression','arg_list',1,'p_arg_list','gradscript_parse.py',137),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','gradscript_parse.py',138),
  ('param_list -> IDEN COMMA param_list','param_list',3,'p_param_list','gradscript_parse.py',148),
  ('param_list -> IDEN','param_list',1,'p_param_list','gradscript_parse.py',149),
  ('function_call -> expression L_PAR R_PAR','function_call',3,'p_function_call','gradscript_parse.py',162),
  ('function_call -> expression L_PAR arg_list R_PAR','function_call',4,'p_function_call','gradscript_parse.py',163),
  ('lambda -> L_PAR R_PAR ARROW L_BRC block R_BRC','lambda',6,'p_lambda','gradscript_parse.py',175),
  ('lambda -> L_PAR param_list R_PAR ARROW L_BRC block R_BRC','lambda',7,'p_lambda','gradscript_parse.py',176),
  ('lambda -> L_PAR IDEN R_PAR ARROW L_BRC block R_BRC','lambda',7,'p_lambda','gradscript_parse.py',177),
]
