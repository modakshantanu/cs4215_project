
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORNOTleftEQNEQleftLEQGEQLTGTleftPLUSMINUSleftMULTIPLYDIVIDEMODULOrightUNARYAND ANY ARROW ASSIGN BOOL BOOL_LIT BREAK COLON COMMA CONTINUE DIVIDE ELSE EQ GEQ GT IDEN IF LEQ LET LT L_BKT L_BRC L_PAR MINUS MODULO MULTIPLY MULTI_COMMENT NEQ NOT NUMBER NUM_LIT OR PLUS RETURN R_BKT R_BRC R_PAR SEMI SINGLE_COMMENT STRING STR_LIT VOID WHILE\n    program : block\n    \n    type : NUMBER\n         | BOOL\n         | STRING \n         | ANY\n         | VOID\n         | type ARROW type\n         | L_PAR typelist R_PAR\n    \n    typelist : type COMMA typelist \n             | type\n    \n    block : statement \n          | statement block    \n    \n    statement : expression SEMI \n              | IDEN ASSIGN expression SEMI\n              | LET IDEN SEMI\n              | LET IDEN COLON type SEMI\n              | LET IDEN ASSIGN expression SEMI\n              | LET IDEN COLON type ASSIGN expression SEMI\n              | RETURN expression SEMI\n              | IF L_PAR expression R_PAR statement ELSE statement\n              | IF L_PAR expression R_PAR statement\n              | WHILE L_PAR expression R_PAR statement\n              | L_BRC block R_BRC\n              | BREAK SEMI\n              | CONTINUE SEMI\n    \n    expression : binary_operation\n               | unary_operation\n               | L_PAR expression R_PAR\n               | NUM_LIT\n               | BOOL_LIT\n               | STR_LIT\n               | function_call\n               | lambda\n               | IDEN\n               | L_BKT arg_list R_BKT\n               | expression L_BKT expression R_BKT\n    \n     binary_operation : expression PLUS expression \n                     | expression MINUS expression\n                     | expression MULTIPLY expression\n                     | expression DIVIDE expression\n                     | expression MODULO expression\n                     | expression EQ expression\n                     | expression NEQ expression\n                     | expression LT expression\n                     | expression GT expression\n                     | expression LEQ expression\n                     | expression GEQ expression\n                     | expression OR expression\n                     | expression AND expression\n    \n     unary_operation : PLUS expression %prec UNARY\n              | MINUS expression %prec UNARY\n              | NOT expression %prec UNARY\n    \n    arg_list : expression \n             | expression COMMA arg_list\n    \n    param_list : IDEN COMMA param_list\n               | IDEN COLON type COMMA param_list\n               | IDEN\n               | IDEN COLON type\n    \n    function_call : expression L_PAR R_PAR\n                  | expression L_PAR arg_list R_PAR\n    \n    lambda : L_PAR R_PAR ARROW L_BRC block R_BRC\n           | L_PAR R_PAR COLON type ARROW L_BRC block R_BRC\n           | L_PAR IDEN R_PAR ARROW L_BRC block R_BRC\n           | L_PAR IDEN R_PAR COLON type ARROW L_BRC block R_BRC\n           | L_PAR param_list R_PAR ARROW L_BRC block R_BRC\n           | L_PAR param_list R_PAR COLON type ARROW L_BRC block R_BRC\n    '
    
_lr_action_items = {'IDEN':([0,3,6,7,9,11,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,51,53,54,77,79,80,87,90,92,95,104,105,114,116,117,121,122,125,127,128,130,135,137,143,145,148,150,],[5,5,43,45,49,5,45,45,45,45,-13,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-24,-25,-15,45,-19,110,-23,45,-14,5,5,5,-16,45,-17,-21,5,110,5,-22,5,5,-18,-20,5,5,]),'LET':([0,3,11,26,53,54,77,80,90,95,104,105,114,116,121,122,125,128,130,135,137,143,145,148,150,],[6,6,6,-13,-24,-25,-15,-19,-23,-14,6,6,6,-16,-17,-21,6,6,-22,6,6,-18,-20,6,6,]),'RETURN':([0,3,11,26,53,54,77,80,90,95,104,105,114,116,121,122,125,128,130,135,137,143,145,148,150,],[7,7,7,-13,-24,-25,-15,-19,-23,-14,7,7,7,-16,-17,-21,7,7,-22,7,7,-18,-20,7,7,]),'IF':([0,3,11,26,53,54,77,80,90,95,104,105,114,116,121,122,125,128,130,135,137,143,145,148,150,],[8,8,8,-13,-24,-25,-15,-19,-23,-14,8,8,8,-16,-17,-21,8,8,-22,8,8,-18,-20,8,8,]),'WHILE':([0,3,11,26,53,54,77,80,90,95,104,105,114,116,121,122,125,128,130,135,137,143,145,148,150,],[10,10,10,-13,-24,-25,-15,-19,-23,-14,10,10,10,-16,-17,-21,10,10,-22,10,10,-18,-20,10,10,]),'L_BRC':([0,3,11,26,53,54,77,80,83,90,95,104,105,107,112,114,116,121,122,124,125,128,130,135,137,139,142,143,145,148,150,],[11,11,11,-13,-24,-25,-15,-19,105,-23,-14,11,11,125,128,11,-16,-17,-21,137,11,11,-22,11,11,148,150,-18,-20,11,11,]),'BREAK':([0,3,11,26,53,54,77,80,90,95,104,105,114,116,121,122,125,128,130,135,137,143,145,148,150,],[12,12,12,-13,-24,-25,-15,-19,-23,-14,12,12,12,-16,-17,-21,12,12,-22,12,12,-18,-20,12,12,]),'CONTINUE':([0,3,11,26,53,54,77,80,90,95,104,105,114,116,121,122,125,128,130,135,137,143,145,148,150,],[13,13,13,-13,-24,-25,-15,-19,-23,-14,13,13,13,-16,-17,-21,13,13,-22,13,13,-18,-20,13,13,]),'L_PAR':([0,3,4,5,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,49,51,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,84,86,89,90,91,92,93,94,95,102,103,104,105,108,113,114,116,117,118,121,122,124,125,128,130,131,134,135,136,137,139,142,143,145,147,148,149,150,151,154,155,],[9,9,41,-34,9,46,9,51,9,-26,-27,-29,-30,-31,-32,-33,9,9,9,9,-13,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,41,-34,9,41,-34,9,-24,-25,41,-50,-51,-52,41,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-59,41,-15,102,9,-19,41,-28,102,102,41,-23,-35,9,-36,-60,-14,102,41,9,9,102,102,9,-16,9,102,-17,-21,102,9,9,-22,41,102,9,-61,9,102,102,-18,-20,-63,9,-65,9,-62,-64,-66,]),'NUM_LIT':([0,3,7,9,11,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,51,53,54,77,79,80,90,92,95,104,105,114,116,117,121,122,125,128,130,135,137,143,145,148,150,],[16,16,16,16,16,16,16,16,16,-13,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-24,-25,-15,16,-19,-23,16,-14,16,16,16,-16,16,-17,-21,16,16,-22,16,16,-18,-20,16,16,]),'BOOL_LIT':([0,3,7,9,11,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,51,53,54,77,79,80,90,92,95,104,105,114,116,117,121,122,125,128,130,135,137,143,145,148,150,],[17,17,17,17,17,17,17,17,17,-13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-24,-25,-15,17,-19,-23,17,-14,17,17,17,-16,17,-17,-21,17,17,-22,17,17,-18,-20,17,17,]),'STR_LIT':([0,3,7,9,11,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,51,53,54,77,79,80,90,92,95,104,105,114,116,117,121,122,125,128,130,135,137,143,145,148,150,],[18,18,18,18,18,18,18,18,18,-13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-24,-25,-15,18,-19,-23,18,-14,18,18,18,-16,18,-17,-21,18,18,-22,18,18,-18,-20,18,18,]),'L_BKT':([0,3,4,5,7,9,11,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,49,51,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,79,80,81,82,89,90,91,92,93,94,95,103,104,105,114,116,117,121,122,125,128,130,131,135,136,137,143,145,147,148,149,150,151,154,155,],[21,21,27,-34,21,21,21,-26,-27,-29,-30,-31,-32,-33,21,21,21,21,-13,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,27,-34,21,27,-34,21,-24,-25,27,-50,-51,-52,27,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-59,27,-15,21,-19,27,-28,27,-23,-35,21,-36,-60,-14,27,21,21,21,-16,21,-17,-21,21,21,-22,27,21,-61,21,-18,-20,-63,21,-65,21,-62,-64,-66,]),'PLUS':([0,3,4,5,7,9,11,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,49,51,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,79,80,81,82,89,90,91,92,93,94,95,103,104,105,114,116,117,121,122,125,128,130,131,135,136,137,143,145,147,148,149,150,151,154,155,],[22,22,28,-34,22,22,22,-26,-27,-29,-30,-31,-32,-33,22,22,22,22,-13,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,-34,22,28,-34,22,-24,-25,28,-50,-51,-52,28,-37,-38,-39,-40,-41,28,28,28,28,28,28,28,28,-59,28,-15,22,-19,28,-28,28,-23,-35,22,-36,-60,-14,28,22,22,22,-16,22,-17,-21,22,22,-22,28,22,-61,22,-18,-20,-63,22,-65,22,-62,-64,-66,]),'MINUS':([0,3,4,5,7,9,11,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,49,51,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,79,80,81,82,89,90,91,92,93,94,95,103,104,105,114,116,117,121,122,125,128,130,131,135,136,137,143,145,147,148,149,150,151,154,155,],[23,23,29,-34,23,23,23,-26,-27,-29,-30,-31,-32,-33,23,23,23,23,-13,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,29,-34,23,29,-34,23,-24,-25,29,-50,-51,-52,29,-37,-38,-39,-40,-41,29,29,29,29,29,29,29,29,-59,29,-15,23,-19,29,-28,29,-23,-35,23,-36,-60,-14,29,23,23,23,-16,23,-17,-21,23,23,-22,29,23,-61,23,-18,-20,-63,23,-65,23,-62,-64,-66,]),'NOT':([0,3,7,9,11,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,51,53,54,77,79,80,90,92,95,104,105,114,116,117,121,122,125,128,130,135,137,143,145,148,150,],[24,24,24,24,24,24,24,24,24,-13,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-24,-25,-15,24,-19,-23,24,-14,24,24,24,-16,24,-17,-21,24,24,-22,24,24,-18,-20,24,24,]),'$end':([1,2,3,25,26,53,54,77,80,90,95,116,121,122,130,143,145,],[0,-1,-11,-12,-13,-24,-25,-15,-19,-23,-14,-16,-17,-21,-22,-18,-20,]),'R_BRC':([3,25,26,52,53,54,77,80,90,95,116,121,122,123,130,138,141,143,145,146,152,153,],[-11,-12,-13,90,-24,-25,-15,-19,-23,-14,-16,-17,-21,136,-22,147,149,-18,-20,151,154,155,]),'SEMI':([4,5,12,13,14,15,16,17,18,19,20,43,44,45,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,82,91,93,94,96,97,98,99,100,101,103,131,132,133,136,147,149,151,154,155,],[26,-34,53,54,-26,-27,-29,-30,-31,-32,-33,77,80,-34,-50,-51,-52,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-59,95,-28,-35,-36,-60,116,-2,-3,-4,-5,-6,121,143,-7,-8,-61,-63,-65,-62,-64,-66,]),'MULTIPLY':([4,5,14,15,16,17,18,19,20,44,45,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,89,91,93,94,103,131,136,147,149,151,154,155,],[30,-34,-26,-27,-29,-30,-31,-32,-33,30,-34,30,-34,30,-50,-51,-52,30,30,30,-39,-40,-41,30,30,30,30,30,30,30,30,-59,30,30,-28,30,-35,-36,-60,30,30,-61,-63,-65,-62,-64,-66,]),'DIVIDE':([4,5,14,15,16,17,18,19,20,44,45,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,89,91,93,94,103,131,136,147,149,151,154,155,],[31,-34,-26,-27,-29,-30,-31,-32,-33,31,-34,31,-34,31,-50,-51,-52,31,31,31,-39,-40,-41,31,31,31,31,31,31,31,31,-59,31,31,-28,31,-35,-36,-60,31,31,-61,-63,-65,-62,-64,-66,]),'MODULO':([4,5,14,15,16,17,18,19,20,44,45,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,89,91,93,94,103,131,136,147,149,151,154,155,],[32,-34,-26,-27,-29,-30,-31,-32,-33,32,-34,32,-34,32,-50,-51,-52,32,32,32,-39,-40,-41,32,32,32,32,32,32,32,32,-59,32,32,-28,32,-35,-36,-60,32,32,-61,-63,-65,-62,-64,-66,]),'EQ':([4,5,14,15,16,17,18,19,20,44,45,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,89,91,93,94,103,131,136,147,149,151,154,155,],[33,-34,-26,-27,-29,-30,-31,-32,-33,33,-34,33,-34,33,-50,-51,-52,33,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,33,33,-59,33,33,-28,33,-35,-36,-60,33,33,-61,-63,-65,-62,-64,-66,]),'NEQ':([4,5,14,15,16,17,18,19,20,44,45,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,89,91,93,94,103,131,136,147,149,151,154,155,],[34,-34,-26,-27,-29,-30,-31,-32,-33,34,-34,34,-34,34,-50,-51,-52,34,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,34,34,-59,34,34,-28,34,-35,-36,-60,34,34,-61,-63,-65,-62,-64,-66,]),'LT':([4,5,14,15,16,17,18,19,20,44,45,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,89,91,93,94,103,131,136,147,149,151,154,155,],[35,-34,-26,-27,-29,-30,-31,-32,-33,35,-34,35,-34,35,-50,-51,-52,35,-37,-38,-39,-40,-41,35,35,-44,-45,-46,-47,35,35,-59,35,35,-28,35,-35,-36,-60,35,35,-61,-63,-65,-62,-64,-66,]),'GT':([4,5,14,15,16,17,18,19,20,44,45,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,89,91,93,94,103,131,136,147,149,151,154,155,],[36,-34,-26,-27,-29,-30,-31,-32,-33,36,-34,36,-34,36,-50,-51,-52,36,-37,-38,-39,-40,-41,36,36,-44,-45,-46,-47,36,36,-59,36,36,-28,36,-35,-36,-60,36,36,-61,-63,-65,-62,-64,-66,]),'LEQ':([4,5,14,15,16,17,18,19,20,44,45,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,89,91,93,94,103,131,136,147,149,151,154,155,],[37,-34,-26,-27,-29,-30,-31,-32,-33,37,-34,37,-34,37,-50,-51,-52,37,-37,-38,-39,-40,-41,37,37,-44,-45,-46,-47,37,37,-59,37,37,-28,37,-35,-36,-60,37,37,-61,-63,-65,-62,-64,-66,]),'GEQ':([4,5,14,15,16,17,18,19,20,44,45,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,89,91,93,94,103,131,136,147,149,151,154,155,],[38,-34,-26,-27,-29,-30,-31,-32,-33,38,-34,38,-34,38,-50,-51,-52,38,-37,-38,-39,-40,-41,38,38,-44,-45,-46,-47,38,38,-59,38,38,-28,38,-35,-36,-60,38,38,-61,-63,-65,-62,-64,-66,]),'OR':([4,5,14,15,16,17,18,19,20,44,45,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,89,91,93,94,103,131,136,147,149,151,154,155,],[39,-34,-26,-27,-29,-30,-31,-32,-33,39,-34,39,-34,39,-50,-51,-52,39,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-59,39,39,-28,39,-35,-36,-60,39,39,-61,-63,-65,-62,-64,-66,]),'AND':([4,5,14,15,16,17,18,19,20,44,45,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,89,91,93,94,103,131,136,147,149,151,154,155,],[40,-34,-26,-27,-29,-30,-31,-32,-33,40,-34,40,-34,40,-50,-51,-52,40,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-59,40,40,-28,40,-35,-36,-60,40,40,-61,-63,-65,-62,-64,-66,]),'ASSIGN':([5,43,96,97,98,99,100,101,132,133,],[42,79,117,-2,-3,-4,-5,-6,-7,-8,]),'R_PAR':([9,14,15,16,17,18,19,20,41,45,47,49,50,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,81,82,89,91,93,94,97,98,99,100,101,109,110,111,115,119,120,132,133,136,140,144,147,149,151,154,155,],[48,-26,-27,-29,-30,-31,-32,-33,74,-34,82,85,88,-53,-50,-51,-52,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-59,94,104,-28,114,-35,-36,-60,-2,-3,-4,-5,-6,-58,-57,-55,-54,133,-10,-7,-8,-61,-56,-9,-63,-65,-62,-64,-66,]),'COMMA':([14,15,16,17,18,19,20,45,49,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,82,91,93,94,97,98,99,100,101,109,110,120,132,133,136,147,149,151,154,155,],[-26,-27,-29,-30,-31,-32,-33,-34,87,92,-50,-51,-52,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-59,-28,-35,-36,-60,-2,-3,-4,-5,-6,127,87,134,-7,-8,-61,-63,-65,-62,-64,-66,]),'R_BKT':([14,15,16,17,18,19,20,45,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,82,91,93,94,115,136,147,149,151,154,155,],[-26,-27,-29,-30,-31,-32,-33,-34,91,-53,-50,-51,-52,93,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-59,-28,-35,-36,-60,-54,-61,-63,-65,-62,-64,-66,]),'ELSE':([26,53,54,77,80,90,95,116,121,122,130,143,145,],[-13,-24,-25,-15,-19,-23,-14,-16,-17,135,-22,-18,-20,]),'COLON':([43,48,49,85,88,110,],[78,84,86,108,113,86,]),'ARROW':([48,85,88,96,97,98,99,100,101,106,109,120,126,129,132,133,],[83,107,112,118,-2,-3,-4,-5,-6,124,118,118,139,142,118,-8,]),'NUMBER':([78,84,86,102,108,113,118,124,134,139,142,],[97,97,97,97,97,97,97,97,97,97,97,]),'BOOL':([78,84,86,102,108,113,118,124,134,139,142,],[98,98,98,98,98,98,98,98,98,98,98,]),'STRING':([78,84,86,102,108,113,118,124,134,139,142,],[99,99,99,99,99,99,99,99,99,99,99,]),'ANY':([78,84,86,102,108,113,118,124,134,139,142,],[100,100,100,100,100,100,100,100,100,100,100,]),'VOID':([78,84,86,102,108,113,118,124,134,139,142,],[101,101,101,101,101,101,101,101,101,101,101,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,3,11,105,125,128,137,148,150,],[2,25,52,123,138,141,146,152,153,]),'statement':([0,3,11,104,105,114,125,128,135,137,148,150,],[3,3,3,122,3,130,3,3,145,3,3,3,]),'expression':([0,3,7,9,11,21,22,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,51,79,92,104,105,114,117,125,128,135,137,148,150,],[4,4,44,47,4,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,56,76,81,89,103,56,4,4,4,131,4,4,4,4,4,4,]),'binary_operation':([0,3,7,9,11,21,22,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,51,79,92,104,105,114,117,125,128,135,137,148,150,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'unary_operation':([0,3,7,9,11,21,22,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,51,79,92,104,105,114,117,125,128,135,137,148,150,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'function_call':([0,3,7,9,11,21,22,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,51,79,92,104,105,114,117,125,128,135,137,148,150,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'lambda':([0,3,7,9,11,21,22,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,51,79,92,104,105,114,117,125,128,135,137,148,150,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'param_list':([9,87,127,],[50,111,140,]),'arg_list':([21,41,92,],[55,75,115,]),'type':([78,84,86,102,108,113,118,124,134,139,142,],[96,106,109,120,126,129,132,132,120,132,132,]),'typelist':([102,134,],[119,144,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','gradscript_parse.py',18),
  ('type -> NUMBER','type',1,'p_type','gradscript_parse.py',24),
  ('type -> BOOL','type',1,'p_type','gradscript_parse.py',25),
  ('type -> STRING','type',1,'p_type','gradscript_parse.py',26),
  ('type -> ANY','type',1,'p_type','gradscript_parse.py',27),
  ('type -> VOID','type',1,'p_type','gradscript_parse.py',28),
  ('type -> type ARROW type','type',3,'p_type','gradscript_parse.py',29),
  ('type -> L_PAR typelist R_PAR','type',3,'p_type','gradscript_parse.py',30),
  ('typelist -> type COMMA typelist','typelist',3,'p_typelist','gradscript_parse.py',42),
  ('typelist -> type','typelist',1,'p_typelist','gradscript_parse.py',43),
  ('block -> statement','block',1,'p_block','gradscript_parse.py',56),
  ('block -> statement block','block',2,'p_block','gradscript_parse.py',57),
  ('statement -> expression SEMI','statement',2,'p_statement','gradscript_parse.py',69),
  ('statement -> IDEN ASSIGN expression SEMI','statement',4,'p_statement','gradscript_parse.py',70),
  ('statement -> LET IDEN SEMI','statement',3,'p_statement','gradscript_parse.py',71),
  ('statement -> LET IDEN COLON type SEMI','statement',5,'p_statement','gradscript_parse.py',72),
  ('statement -> LET IDEN ASSIGN expression SEMI','statement',5,'p_statement','gradscript_parse.py',73),
  ('statement -> LET IDEN COLON type ASSIGN expression SEMI','statement',7,'p_statement','gradscript_parse.py',74),
  ('statement -> RETURN expression SEMI','statement',3,'p_statement','gradscript_parse.py',75),
  ('statement -> IF L_PAR expression R_PAR statement ELSE statement','statement',7,'p_statement','gradscript_parse.py',76),
  ('statement -> IF L_PAR expression R_PAR statement','statement',5,'p_statement','gradscript_parse.py',77),
  ('statement -> WHILE L_PAR expression R_PAR statement','statement',5,'p_statement','gradscript_parse.py',78),
  ('statement -> L_BRC block R_BRC','statement',3,'p_statement','gradscript_parse.py',79),
  ('statement -> BREAK SEMI','statement',2,'p_statement','gradscript_parse.py',80),
  ('statement -> CONTINUE SEMI','statement',2,'p_statement','gradscript_parse.py',81),
  ('expression -> binary_operation','expression',1,'p_expression','gradscript_parse.py',114),
  ('expression -> unary_operation','expression',1,'p_expression','gradscript_parse.py',115),
  ('expression -> L_PAR expression R_PAR','expression',3,'p_expression','gradscript_parse.py',116),
  ('expression -> NUM_LIT','expression',1,'p_expression','gradscript_parse.py',117),
  ('expression -> BOOL_LIT','expression',1,'p_expression','gradscript_parse.py',118),
  ('expression -> STR_LIT','expression',1,'p_expression','gradscript_parse.py',119),
  ('expression -> function_call','expression',1,'p_expression','gradscript_parse.py',120),
  ('expression -> lambda','expression',1,'p_expression','gradscript_parse.py',121),
  ('expression -> IDEN','expression',1,'p_expression','gradscript_parse.py',122),
  ('expression -> L_BKT arg_list R_BKT','expression',3,'p_expression','gradscript_parse.py',123),
  ('expression -> expression L_BKT expression R_BKT','expression',4,'p_expression','gradscript_parse.py',124),
  ('binary_operation -> expression PLUS expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',146),
  ('binary_operation -> expression MINUS expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',147),
  ('binary_operation -> expression MULTIPLY expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',148),
  ('binary_operation -> expression DIVIDE expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',149),
  ('binary_operation -> expression MODULO expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',150),
  ('binary_operation -> expression EQ expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',151),
  ('binary_operation -> expression NEQ expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',152),
  ('binary_operation -> expression LT expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',153),
  ('binary_operation -> expression GT expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',154),
  ('binary_operation -> expression LEQ expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',155),
  ('binary_operation -> expression GEQ expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',156),
  ('binary_operation -> expression OR expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',157),
  ('binary_operation -> expression AND expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',158),
  ('unary_operation -> PLUS expression','unary_operation',2,'p_unary_operation','gradscript_parse.py',165),
  ('unary_operation -> MINUS expression','unary_operation',2,'p_unary_operation','gradscript_parse.py',166),
  ('unary_operation -> NOT expression','unary_operation',2,'p_unary_operation','gradscript_parse.py',167),
  ('arg_list -> expression','arg_list',1,'p_arg_list','gradscript_parse.py',174),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','gradscript_parse.py',175),
  ('param_list -> IDEN COMMA param_list','param_list',3,'p_param_list','gradscript_parse.py',185),
  ('param_list -> IDEN COLON type COMMA param_list','param_list',5,'p_param_list','gradscript_parse.py',186),
  ('param_list -> IDEN','param_list',1,'p_param_list','gradscript_parse.py',187),
  ('param_list -> IDEN COLON type','param_list',3,'p_param_list','gradscript_parse.py',188),
  ('function_call -> expression L_PAR R_PAR','function_call',3,'p_function_call','gradscript_parse.py',208),
  ('function_call -> expression L_PAR arg_list R_PAR','function_call',4,'p_function_call','gradscript_parse.py',209),
  ('lambda -> L_PAR R_PAR ARROW L_BRC block R_BRC','lambda',6,'p_lambda','gradscript_parse.py',221),
  ('lambda -> L_PAR R_PAR COLON type ARROW L_BRC block R_BRC','lambda',8,'p_lambda','gradscript_parse.py',222),
  ('lambda -> L_PAR IDEN R_PAR ARROW L_BRC block R_BRC','lambda',7,'p_lambda','gradscript_parse.py',223),
  ('lambda -> L_PAR IDEN R_PAR COLON type ARROW L_BRC block R_BRC','lambda',9,'p_lambda','gradscript_parse.py',224),
  ('lambda -> L_PAR param_list R_PAR ARROW L_BRC block R_BRC','lambda',7,'p_lambda','gradscript_parse.py',225),
  ('lambda -> L_PAR param_list R_PAR COLON type ARROW L_BRC block R_BRC','lambda',9,'p_lambda','gradscript_parse.py',226),
]
