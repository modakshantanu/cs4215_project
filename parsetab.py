
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDErightUNARYAND ANY ARROW ASSIGN BOOL BOOL_LIT BREAK COLON COMMA CONTINUE DIVIDE ELSE EQ GEQ GT IDEN IF LEQ LET LT L_BRC L_PAR MINUS MODULO MULTIPLY MULTI_COMMENT NEQ NOT NUMBER NUM_LIT OR PLUS RETURN R_BRC R_PAR SEMI SINGLE_COMMENT STRING STR_LIT VOID WHILE\n    program : block\n    \n    type : NUMBER\n         | BOOL\n         | STRING \n         | ANY\n         | VOID\n         | type ARROW type\n         | L_PAR typelist R_PAR\n    \n    typelist : type COMMA typelist \n             | type\n    \n    block : statement \n          | statement block    \n    \n    statement : expression SEMI \n              | IDEN ASSIGN expression SEMI\n              | LET IDEN SEMI\n              | LET IDEN COLON type SEMI\n              | LET IDEN ASSIGN expression SEMI\n              | LET IDEN COLON type ASSIGN expression SEMI\n              | RETURN expression SEMI\n              | IF L_PAR expression R_PAR statement ELSE statement\n              | IF L_PAR expression R_PAR statement\n              | WHILE L_PAR expression R_PAR statement\n              | L_BRC block R_BRC\n              | BREAK SEMI\n              | CONTINUE SEMI\n    \n    expression : binary_operation\n               | unary_operation\n               | L_PAR expression R_PAR\n               | NUM_LIT\n               | BOOL_LIT\n               | STR_LIT\n               | function_call\n               | lambda\n               | IDEN\n\n    \n     binary_operation : expression PLUS expression \n                     | expression MINUS expression\n                     | expression MULTIPLY expression\n                     | expression DIVIDE expression\n                     | expression MODULO expression\n                     | expression EQ expression\n                     | expression NEQ expression\n                     | expression LT expression\n                     | expression GT expression\n                     | expression LEQ expression\n                     | expression GEQ expression\n                     | expression OR expression\n                     | expression AND expression\n    \n     unary_operation : PLUS expression %prec UNARY\n              | MINUS expression %prec UNARY\n              | NOT expression %prec UNARY\n    \n    arg_list : expression \n             | expression COMMA arg_list\n    \n    param_list : IDEN COMMA param_list\n               | IDEN COLON type COMMA param_list\n               | IDEN\n               | IDEN COLON type\n    \n    function_call : expression L_PAR R_PAR\n                  | expression L_PAR arg_list R_PAR\n    \n    lambda : L_PAR R_PAR ARROW L_BRC block R_BRC\n           | L_PAR R_PAR COLON type ARROW L_BRC block R_BRC\n           | L_PAR IDEN R_PAR ARROW L_BRC block R_BRC\n           | L_PAR IDEN R_PAR COLON type ARROW L_BRC block R_BRC\n           | L_PAR param_list R_PAR ARROW L_BRC block R_BRC\n           | L_PAR param_list R_PAR COLON type ARROW L_BRC block R_BRC\n    '
    
_lr_action_items = {'IDEN':([0,3,6,7,9,11,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,49,51,52,73,75,76,83,86,87,89,98,99,108,110,111,115,116,119,121,122,124,129,131,137,139,142,144,],[5,5,41,43,47,5,43,43,43,-13,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-24,-25,-15,43,-19,104,-23,43,-14,5,5,5,-16,43,-17,-21,5,104,5,-22,5,5,-18,-20,5,5,]),'LET':([0,3,11,25,51,52,73,76,86,89,98,99,108,110,115,116,119,122,124,129,131,137,139,142,144,],[6,6,6,-13,-24,-25,-15,-19,-23,-14,6,6,6,-16,-17,-21,6,6,-22,6,6,-18,-20,6,6,]),'RETURN':([0,3,11,25,51,52,73,76,86,89,98,99,108,110,115,116,119,122,124,129,131,137,139,142,144,],[7,7,7,-13,-24,-25,-15,-19,-23,-14,7,7,7,-16,-17,-21,7,7,-22,7,7,-18,-20,7,7,]),'IF':([0,3,11,25,51,52,73,76,86,89,98,99,108,110,115,116,119,122,124,129,131,137,139,142,144,],[8,8,8,-13,-24,-25,-15,-19,-23,-14,8,8,8,-16,-17,-21,8,8,-22,8,8,-18,-20,8,8,]),'WHILE':([0,3,11,25,51,52,73,76,86,89,98,99,108,110,115,116,119,122,124,129,131,137,139,142,144,],[10,10,10,-13,-24,-25,-15,-19,-23,-14,10,10,10,-16,-17,-21,10,10,-22,10,10,-18,-20,10,10,]),'L_BRC':([0,3,11,25,51,52,73,76,79,86,89,98,99,101,106,108,110,115,116,118,119,122,124,129,131,133,136,137,139,142,144,],[11,11,11,-13,-24,-25,-15,-19,99,-23,-14,11,11,119,122,11,-16,-17,-21,131,11,11,-22,11,11,142,144,-18,-20,11,11,]),'BREAK':([0,3,11,25,51,52,73,76,86,89,98,99,108,110,115,116,119,122,124,129,131,137,139,142,144,],[12,12,12,-13,-24,-25,-15,-19,-23,-14,12,12,12,-16,-17,-21,12,12,-22,12,12,-18,-20,12,12,]),'CONTINUE':([0,3,11,25,51,52,73,76,86,89,98,99,108,110,115,116,119,122,124,129,131,137,139,142,144,],[13,13,13,-13,-24,-25,-15,-19,-23,-14,13,13,13,-16,-17,-21,13,13,-22,13,13,-18,-20,13,13,]),'L_PAR':([0,3,4,5,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,80,82,85,86,87,88,89,96,97,98,99,102,107,108,110,111,112,115,116,118,119,122,124,125,128,129,130,131,133,136,137,139,141,142,143,144,145,148,149,],[9,9,39,-34,9,44,9,49,9,-26,-27,-29,-30,-31,-32,-33,9,9,9,-13,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,39,-34,9,39,-34,9,-24,-25,-48,-49,-50,-35,-36,-37,-38,39,39,39,39,39,39,39,39,39,39,-57,39,-15,96,9,-19,39,-28,96,96,39,-23,9,-58,-14,96,39,9,9,96,96,9,-16,9,96,-17,-21,96,9,9,-22,39,96,9,-59,9,96,96,-18,-20,-61,9,-63,9,-60,-62,-64,]),'NUM_LIT':([0,3,7,9,11,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,49,51,52,73,75,76,86,87,89,98,99,108,110,111,115,116,119,122,124,129,131,137,139,142,144,],[16,16,16,16,16,16,16,16,-13,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-24,-25,-15,16,-19,-23,16,-14,16,16,16,-16,16,-17,-21,16,16,-22,16,16,-18,-20,16,16,]),'BOOL_LIT':([0,3,7,9,11,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,49,51,52,73,75,76,86,87,89,98,99,108,110,111,115,116,119,122,124,129,131,137,139,142,144,],[17,17,17,17,17,17,17,17,-13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-24,-25,-15,17,-19,-23,17,-14,17,17,17,-16,17,-17,-21,17,17,-22,17,17,-18,-20,17,17,]),'STR_LIT':([0,3,7,9,11,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,49,51,52,73,75,76,86,87,89,98,99,108,110,111,115,116,119,122,124,129,131,137,139,142,144,],[18,18,18,18,18,18,18,18,-13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-24,-25,-15,18,-19,-23,18,-14,18,18,18,-16,18,-17,-21,18,18,-22,18,18,-18,-20,18,18,]),'PLUS':([0,3,4,5,7,9,11,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,75,76,77,78,85,86,87,88,89,97,98,99,108,110,111,115,116,119,122,124,125,129,130,131,137,139,141,142,143,144,145,148,149,],[21,21,26,-34,21,21,21,-26,-27,-29,-30,-31,-32,-33,21,21,21,-13,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,26,-34,21,26,-34,21,-24,-25,-48,-49,-50,-35,-36,-37,-38,26,26,26,26,26,26,26,26,26,26,-57,26,-15,21,-19,26,-28,26,-23,21,-58,-14,26,21,21,21,-16,21,-17,-21,21,21,-22,26,21,-59,21,-18,-20,-61,21,-63,21,-60,-62,-64,]),'MINUS':([0,3,4,5,7,9,11,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,75,76,77,78,85,86,87,88,89,97,98,99,108,110,111,115,116,119,122,124,125,129,130,131,137,139,141,142,143,144,145,148,149,],[22,22,27,-34,22,22,22,-26,-27,-29,-30,-31,-32,-33,22,22,22,-13,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,27,-34,22,27,-34,22,-24,-25,-48,-49,-50,-35,-36,-37,-38,27,27,27,27,27,27,27,27,27,27,-57,27,-15,22,-19,27,-28,27,-23,22,-58,-14,27,22,22,22,-16,22,-17,-21,22,22,-22,27,22,-59,22,-18,-20,-61,22,-63,22,-60,-62,-64,]),'NOT':([0,3,7,9,11,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,49,51,52,73,75,76,86,87,89,98,99,108,110,111,115,116,119,122,124,129,131,137,139,142,144,],[23,23,23,23,23,23,23,23,-13,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-24,-25,-15,23,-19,-23,23,-14,23,23,23,-16,23,-17,-21,23,23,-22,23,23,-18,-20,23,23,]),'$end':([1,2,3,24,25,51,52,73,76,86,89,110,115,116,124,137,139,],[0,-1,-11,-12,-13,-24,-25,-15,-19,-23,-14,-16,-17,-21,-22,-18,-20,]),'R_BRC':([3,24,25,50,51,52,73,76,86,89,110,115,116,117,124,132,135,137,139,140,146,147,],[-11,-12,-13,86,-24,-25,-15,-19,-23,-14,-16,-17,-21,130,-22,141,143,-18,-20,145,148,149,]),'SEMI':([4,5,12,13,14,15,16,17,18,19,20,41,42,43,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,78,88,90,91,92,93,94,95,97,125,126,127,130,141,143,145,148,149,],[25,-34,51,52,-26,-27,-29,-30,-31,-32,-33,73,76,-34,-48,-49,-50,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-57,89,-28,-58,110,-2,-3,-4,-5,-6,115,137,-7,-8,-59,-61,-63,-60,-62,-64,]),'MULTIPLY':([4,5,14,15,16,17,18,19,20,42,43,45,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,77,78,85,88,97,125,130,141,143,145,148,149,],[28,-34,-26,-27,-29,-30,-31,-32,-33,28,-34,28,-34,-48,-49,-50,28,28,-37,-38,28,28,28,28,28,28,28,28,28,28,-57,28,28,-28,28,-58,28,28,-59,-61,-63,-60,-62,-64,]),'DIVIDE':([4,5,14,15,16,17,18,19,20,42,43,45,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,77,78,85,88,97,125,130,141,143,145,148,149,],[29,-34,-26,-27,-29,-30,-31,-32,-33,29,-34,29,-34,-48,-49,-50,29,29,-37,-38,29,29,29,29,29,29,29,29,29,29,-57,29,29,-28,29,-58,29,29,-59,-61,-63,-60,-62,-64,]),'MODULO':([4,5,14,15,16,17,18,19,20,42,43,45,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,77,78,85,88,97,125,130,141,143,145,148,149,],[30,-34,-26,-27,-29,-30,-31,-32,-33,30,-34,30,-34,-48,-49,-50,-35,-36,-37,-38,30,30,30,30,30,30,30,30,30,30,-57,30,30,-28,30,-58,30,30,-59,-61,-63,-60,-62,-64,]),'EQ':([4,5,14,15,16,17,18,19,20,42,43,45,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,77,78,85,88,97,125,130,141,143,145,148,149,],[31,-34,-26,-27,-29,-30,-31,-32,-33,31,-34,31,-34,-48,-49,-50,-35,-36,-37,-38,31,31,31,31,31,31,31,31,31,31,-57,31,31,-28,31,-58,31,31,-59,-61,-63,-60,-62,-64,]),'NEQ':([4,5,14,15,16,17,18,19,20,42,43,45,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,77,78,85,88,97,125,130,141,143,145,148,149,],[32,-34,-26,-27,-29,-30,-31,-32,-33,32,-34,32,-34,-48,-49,-50,-35,-36,-37,-38,32,32,32,32,32,32,32,32,32,32,-57,32,32,-28,32,-58,32,32,-59,-61,-63,-60,-62,-64,]),'LT':([4,5,14,15,16,17,18,19,20,42,43,45,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,77,78,85,88,97,125,130,141,143,145,148,149,],[33,-34,-26,-27,-29,-30,-31,-32,-33,33,-34,33,-34,-48,-49,-50,-35,-36,-37,-38,33,33,33,33,33,33,33,33,33,33,-57,33,33,-28,33,-58,33,33,-59,-61,-63,-60,-62,-64,]),'GT':([4,5,14,15,16,17,18,19,20,42,43,45,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,77,78,85,88,97,125,130,141,143,145,148,149,],[34,-34,-26,-27,-29,-30,-31,-32,-33,34,-34,34,-34,-48,-49,-50,-35,-36,-37,-38,34,34,34,34,34,34,34,34,34,34,-57,34,34,-28,34,-58,34,34,-59,-61,-63,-60,-62,-64,]),'LEQ':([4,5,14,15,16,17,18,19,20,42,43,45,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,77,78,85,88,97,125,130,141,143,145,148,149,],[35,-34,-26,-27,-29,-30,-31,-32,-33,35,-34,35,-34,-48,-49,-50,-35,-36,-37,-38,35,35,35,35,35,35,35,35,35,35,-57,35,35,-28,35,-58,35,35,-59,-61,-63,-60,-62,-64,]),'GEQ':([4,5,14,15,16,17,18,19,20,42,43,45,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,77,78,85,88,97,125,130,141,143,145,148,149,],[36,-34,-26,-27,-29,-30,-31,-32,-33,36,-34,36,-34,-48,-49,-50,-35,-36,-37,-38,36,36,36,36,36,36,36,36,36,36,-57,36,36,-28,36,-58,36,36,-59,-61,-63,-60,-62,-64,]),'OR':([4,5,14,15,16,17,18,19,20,42,43,45,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,77,78,85,88,97,125,130,141,143,145,148,149,],[37,-34,-26,-27,-29,-30,-31,-32,-33,37,-34,37,-34,-48,-49,-50,-35,-36,-37,-38,37,37,37,37,37,37,37,37,37,37,-57,37,37,-28,37,-58,37,37,-59,-61,-63,-60,-62,-64,]),'AND':([4,5,14,15,16,17,18,19,20,42,43,45,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,77,78,85,88,97,125,130,141,143,145,148,149,],[38,-34,-26,-27,-29,-30,-31,-32,-33,38,-34,38,-34,-48,-49,-50,-35,-36,-37,-38,38,38,38,38,38,38,38,38,38,38,-57,38,38,-28,38,-58,38,38,-59,-61,-63,-60,-62,-64,]),'ASSIGN':([5,41,90,91,92,93,94,95,126,127,],[40,75,111,-2,-3,-4,-5,-6,-7,-8,]),'R_PAR':([9,14,15,16,17,18,19,20,39,43,45,47,48,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,77,78,85,88,91,92,93,94,95,103,104,105,109,113,114,126,127,130,134,138,141,143,145,148,149,],[46,-26,-27,-29,-30,-31,-32,-33,70,-34,78,81,84,-48,-49,-50,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-51,-57,88,98,-28,108,-58,-2,-3,-4,-5,-6,-56,-55,-53,-52,127,-10,-7,-8,-59,-54,-9,-61,-63,-60,-62,-64,]),'COMMA':([14,15,16,17,18,19,20,43,47,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,78,88,91,92,93,94,95,103,104,114,126,127,130,141,143,145,148,149,],[-26,-27,-29,-30,-31,-32,-33,-34,83,-48,-49,-50,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,87,-57,-28,-58,-2,-3,-4,-5,-6,121,83,128,-7,-8,-59,-61,-63,-60,-62,-64,]),'ELSE':([25,51,52,73,76,86,89,110,115,116,124,137,139,],[-13,-24,-25,-15,-19,-23,-14,-16,-17,129,-22,-18,-20,]),'COLON':([41,46,47,81,84,104,],[74,80,82,102,107,82,]),'ARROW':([46,81,84,90,91,92,93,94,95,100,103,114,120,123,126,127,],[79,101,106,112,-2,-3,-4,-5,-6,118,112,112,133,136,112,-8,]),'NUMBER':([74,80,82,96,102,107,112,118,128,133,136,],[91,91,91,91,91,91,91,91,91,91,91,]),'BOOL':([74,80,82,96,102,107,112,118,128,133,136,],[92,92,92,92,92,92,92,92,92,92,92,]),'STRING':([74,80,82,96,102,107,112,118,128,133,136,],[93,93,93,93,93,93,93,93,93,93,93,]),'ANY':([74,80,82,96,102,107,112,118,128,133,136,],[94,94,94,94,94,94,94,94,94,94,94,]),'VOID':([74,80,82,96,102,107,112,118,128,133,136,],[95,95,95,95,95,95,95,95,95,95,95,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,3,11,99,119,122,131,142,144,],[2,24,50,117,132,135,140,146,147,]),'statement':([0,3,11,98,99,108,119,122,129,131,142,144,],[3,3,3,116,3,124,3,3,139,3,3,3,]),'expression':([0,3,7,9,11,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,49,75,87,98,99,108,111,119,122,129,131,142,144,],[4,4,42,45,4,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,77,85,97,69,4,4,4,125,4,4,4,4,4,4,]),'binary_operation':([0,3,7,9,11,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,49,75,87,98,99,108,111,119,122,129,131,142,144,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'unary_operation':([0,3,7,9,11,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,49,75,87,98,99,108,111,119,122,129,131,142,144,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'function_call':([0,3,7,9,11,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,49,75,87,98,99,108,111,119,122,129,131,142,144,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'lambda':([0,3,7,9,11,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,49,75,87,98,99,108,111,119,122,129,131,142,144,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'param_list':([9,83,121,],[48,105,134,]),'arg_list':([39,87,],[71,109,]),'type':([74,80,82,96,102,107,112,118,128,133,136,],[90,100,103,114,120,123,126,126,114,126,126,]),'typelist':([96,128,],[113,138,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','gradscript_parse.py',15),
  ('type -> NUMBER','type',1,'p_type','gradscript_parse.py',21),
  ('type -> BOOL','type',1,'p_type','gradscript_parse.py',22),
  ('type -> STRING','type',1,'p_type','gradscript_parse.py',23),
  ('type -> ANY','type',1,'p_type','gradscript_parse.py',24),
  ('type -> VOID','type',1,'p_type','gradscript_parse.py',25),
  ('type -> type ARROW type','type',3,'p_type','gradscript_parse.py',26),
  ('type -> L_PAR typelist R_PAR','type',3,'p_type','gradscript_parse.py',27),
  ('typelist -> type COMMA typelist','typelist',3,'p_typelist','gradscript_parse.py',39),
  ('typelist -> type','typelist',1,'p_typelist','gradscript_parse.py',40),
  ('block -> statement','block',1,'p_block','gradscript_parse.py',54),
  ('block -> statement block','block',2,'p_block','gradscript_parse.py',55),
  ('statement -> expression SEMI','statement',2,'p_statement','gradscript_parse.py',67),
  ('statement -> IDEN ASSIGN expression SEMI','statement',4,'p_statement','gradscript_parse.py',68),
  ('statement -> LET IDEN SEMI','statement',3,'p_statement','gradscript_parse.py',69),
  ('statement -> LET IDEN COLON type SEMI','statement',5,'p_statement','gradscript_parse.py',70),
  ('statement -> LET IDEN ASSIGN expression SEMI','statement',5,'p_statement','gradscript_parse.py',71),
  ('statement -> LET IDEN COLON type ASSIGN expression SEMI','statement',7,'p_statement','gradscript_parse.py',72),
  ('statement -> RETURN expression SEMI','statement',3,'p_statement','gradscript_parse.py',73),
  ('statement -> IF L_PAR expression R_PAR statement ELSE statement','statement',7,'p_statement','gradscript_parse.py',74),
  ('statement -> IF L_PAR expression R_PAR statement','statement',5,'p_statement','gradscript_parse.py',75),
  ('statement -> WHILE L_PAR expression R_PAR statement','statement',5,'p_statement','gradscript_parse.py',76),
  ('statement -> L_BRC block R_BRC','statement',3,'p_statement','gradscript_parse.py',77),
  ('statement -> BREAK SEMI','statement',2,'p_statement','gradscript_parse.py',78),
  ('statement -> CONTINUE SEMI','statement',2,'p_statement','gradscript_parse.py',79),
  ('expression -> binary_operation','expression',1,'p_expression','gradscript_parse.py',112),
  ('expression -> unary_operation','expression',1,'p_expression','gradscript_parse.py',113),
  ('expression -> L_PAR expression R_PAR','expression',3,'p_expression','gradscript_parse.py',114),
  ('expression -> NUM_LIT','expression',1,'p_expression','gradscript_parse.py',115),
  ('expression -> BOOL_LIT','expression',1,'p_expression','gradscript_parse.py',116),
  ('expression -> STR_LIT','expression',1,'p_expression','gradscript_parse.py',117),
  ('expression -> function_call','expression',1,'p_expression','gradscript_parse.py',118),
  ('expression -> lambda','expression',1,'p_expression','gradscript_parse.py',119),
  ('expression -> IDEN','expression',1,'p_expression','gradscript_parse.py',120),
  ('binary_operation -> expression PLUS expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',139),
  ('binary_operation -> expression MINUS expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',140),
  ('binary_operation -> expression MULTIPLY expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',141),
  ('binary_operation -> expression DIVIDE expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',142),
  ('binary_operation -> expression MODULO expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',143),
  ('binary_operation -> expression EQ expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',144),
  ('binary_operation -> expression NEQ expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',145),
  ('binary_operation -> expression LT expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',146),
  ('binary_operation -> expression GT expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',147),
  ('binary_operation -> expression LEQ expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',148),
  ('binary_operation -> expression GEQ expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',149),
  ('binary_operation -> expression OR expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',150),
  ('binary_operation -> expression AND expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',151),
  ('unary_operation -> PLUS expression','unary_operation',2,'p_unary_operation','gradscript_parse.py',158),
  ('unary_operation -> MINUS expression','unary_operation',2,'p_unary_operation','gradscript_parse.py',159),
  ('unary_operation -> NOT expression','unary_operation',2,'p_unary_operation','gradscript_parse.py',160),
  ('arg_list -> expression','arg_list',1,'p_arg_list','gradscript_parse.py',167),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','gradscript_parse.py',168),
  ('param_list -> IDEN COMMA param_list','param_list',3,'p_param_list','gradscript_parse.py',178),
  ('param_list -> IDEN COLON type COMMA param_list','param_list',5,'p_param_list','gradscript_parse.py',179),
  ('param_list -> IDEN','param_list',1,'p_param_list','gradscript_parse.py',180),
  ('param_list -> IDEN COLON type','param_list',3,'p_param_list','gradscript_parse.py',181),
  ('function_call -> expression L_PAR R_PAR','function_call',3,'p_function_call','gradscript_parse.py',201),
  ('function_call -> expression L_PAR arg_list R_PAR','function_call',4,'p_function_call','gradscript_parse.py',202),
  ('lambda -> L_PAR R_PAR ARROW L_BRC block R_BRC','lambda',6,'p_lambda','gradscript_parse.py',214),
  ('lambda -> L_PAR R_PAR COLON type ARROW L_BRC block R_BRC','lambda',8,'p_lambda','gradscript_parse.py',215),
  ('lambda -> L_PAR IDEN R_PAR ARROW L_BRC block R_BRC','lambda',7,'p_lambda','gradscript_parse.py',216),
  ('lambda -> L_PAR IDEN R_PAR COLON type ARROW L_BRC block R_BRC','lambda',9,'p_lambda','gradscript_parse.py',217),
  ('lambda -> L_PAR param_list R_PAR ARROW L_BRC block R_BRC','lambda',7,'p_lambda','gradscript_parse.py',218),
  ('lambda -> L_PAR param_list R_PAR COLON type ARROW L_BRC block R_BRC','lambda',9,'p_lambda','gradscript_parse.py',219),
]
