
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDErightUNARYDIVIDE L_PAR MINUS MULTIPLY NUMBER PLUS R_PAR\n    expression : binary_operation\n               | unary_operation\n               | L_PAR expression R_PAR\n               | NUMBER\n\n    \n     binary_operation : expression PLUS expression \n                     | expression MINUS expression\n                     | expression MULTIPLY expression\n                     | expression DIVIDE expression\n    \n     unary_operation : PLUS expression %prec UNARY\n              | MINUS expression %prec UNARY\n    '
    
_lr_action_items = {'L_PAR':([0,4,6,7,8,9,10,11,],[4,4,4,4,4,4,4,4,]),'NUMBER':([0,4,6,7,8,9,10,11,],[5,5,5,5,5,5,5,5,]),'PLUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,],[6,8,-1,-2,6,-4,6,6,6,6,6,6,8,-9,-10,-5,-6,-7,-8,-3,]),'MINUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,],[7,9,-1,-2,7,-4,7,7,7,7,7,7,9,-9,-10,-5,-6,-7,-8,-3,]),'$end':([1,2,3,5,13,14,15,16,17,18,19,],[0,-1,-2,-4,-9,-10,-5,-6,-7,-8,-3,]),'MULTIPLY':([1,2,3,5,12,13,14,15,16,17,18,19,],[10,-1,-2,-4,10,-9,-10,10,10,-7,-8,-3,]),'DIVIDE':([1,2,3,5,12,13,14,15,16,17,18,19,],[11,-1,-2,-4,11,-9,-10,11,11,-7,-8,-3,]),'R_PAR':([2,3,5,12,13,14,15,16,17,18,19,],[-1,-2,-4,19,-9,-10,-5,-6,-7,-8,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,4,6,7,8,9,10,11,],[1,12,13,14,15,16,17,18,]),'binary_operation':([0,4,6,7,8,9,10,11,],[2,2,2,2,2,2,2,2,]),'unary_operation':([0,4,6,7,8,9,10,11,],[3,3,3,3,3,3,3,3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> binary_operation','expression',1,'p_expression','gradscript_parse.py',15),
  ('expression -> unary_operation','expression',1,'p_expression','gradscript_parse.py',16),
  ('expression -> L_PAR expression R_PAR','expression',3,'p_expression','gradscript_parse.py',17),
  ('expression -> NUMBER','expression',1,'p_expression','gradscript_parse.py',18),
  ('binary_operation -> expression PLUS expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',30),
  ('binary_operation -> expression MINUS expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',31),
  ('binary_operation -> expression MULTIPLY expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',32),
  ('binary_operation -> expression DIVIDE expression','binary_operation',3,'p_binary_operation','gradscript_parse.py',33),
  ('unary_operation -> PLUS expression','unary_operation',2,'p_unary_operation','gradscript_parse.py',40),
  ('unary_operation -> MINUS expression','unary_operation',2,'p_unary_operation','gradscript_parse.py',41),
]
