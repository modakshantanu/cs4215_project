Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MULTI_COMMENT
    SINGLE_COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     type -> NUMBER
Rule 3     type -> BOOL
Rule 4     type -> STRING
Rule 5     type -> ANY
Rule 6     block -> statement
Rule 7     block -> statement block
Rule 8     statement -> expression SEMI
Rule 9     statement -> IDEN ASSIGN expression SEMI
Rule 10    statement -> LET IDEN SEMI
Rule 11    statement -> LET IDEN COLON type SEMI
Rule 12    statement -> LET IDEN ASSIGN expression SEMI
Rule 13    statement -> LET IDEN COLON type ASSIGN expression SEMI
Rule 14    statement -> RETURN expression SEMI
Rule 15    statement -> IF L_PAR expression R_PAR statement ELSE statement
Rule 16    statement -> IF L_PAR expression R_PAR statement
Rule 17    statement -> WHILE L_PAR expression R_PAR statement
Rule 18    statement -> L_BRC block R_BRC
Rule 19    statement -> BREAK SEMI
Rule 20    statement -> CONTINUE SEMI
Rule 21    expression -> binary_operation
Rule 22    expression -> unary_operation
Rule 23    expression -> L_PAR expression R_PAR
Rule 24    expression -> NUM_LIT
Rule 25    expression -> BOOL_LIT
Rule 26    expression -> STR_LIT
Rule 27    expression -> function_call
Rule 28    expression -> lambda
Rule 29    expression -> IDEN
Rule 30    binary_operation -> expression PLUS expression
Rule 31    binary_operation -> expression MINUS expression
Rule 32    binary_operation -> expression MULTIPLY expression
Rule 33    binary_operation -> expression DIVIDE expression
Rule 34    unary_operation -> PLUS expression
Rule 35    unary_operation -> MINUS expression
Rule 36    arg_list -> expression
Rule 37    arg_list -> expression COMMA arg_list
Rule 38    param_list -> IDEN COMMA param_list
Rule 39    param_list -> IDEN
Rule 40    function_call -> expression L_PAR R_PAR
Rule 41    function_call -> expression L_PAR arg_list R_PAR
Rule 42    lambda -> L_PAR R_PAR ARROW L_BRC block R_BRC
Rule 43    lambda -> L_PAR param_list R_PAR ARROW L_BRC block R_BRC
Rule 44    lambda -> L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

Terminals, with rules where they appear

ANY                  : 5
ARROW                : 42 43 44
ASSIGN               : 9 12 13
BOOL                 : 3
BOOL_LIT             : 25
BREAK                : 19
COLON                : 11 13
COMMA                : 37 38
CONTINUE             : 20
DIVIDE               : 33
ELSE                 : 15
IDEN                 : 9 10 11 12 13 29 38 39 44
IF                   : 15 16
LET                  : 10 11 12 13
L_BRC                : 18 42 43 44
L_PAR                : 15 16 17 23 40 41 42 43 44
MINUS                : 31 35
MULTIPLY             : 32
MULTI_COMMENT        : 
NUMBER               : 2
NUM_LIT              : 24
PLUS                 : 30 34
RETURN               : 14
R_BRC                : 18 42 43 44
R_PAR                : 15 16 17 23 40 41 42 43 44
SEMI                 : 8 9 10 11 12 13 14 19 20
SINGLE_COMMENT       : 
STRING               : 4
STR_LIT              : 26
WHILE                : 17
error                : 

Nonterminals, with rules where they appear

arg_list             : 37 41
binary_operation     : 21
block                : 1 7 18 42 43 44
expression           : 8 9 12 13 14 15 16 17 23 30 30 31 31 32 32 33 33 34 35 36 37 40 41
function_call        : 27
lambda               : 28
param_list           : 38 43
program              : 0
statement            : 6 7 15 15 16 17
type                 : 11 13
unary_operation      : 22

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (6) block -> . statement
    (7) block -> . statement block
    (8) statement -> . expression SEMI
    (9) statement -> . IDEN ASSIGN expression SEMI
    (10) statement -> . LET IDEN SEMI
    (11) statement -> . LET IDEN COLON type SEMI
    (12) statement -> . LET IDEN ASSIGN expression SEMI
    (13) statement -> . LET IDEN COLON type ASSIGN expression SEMI
    (14) statement -> . RETURN expression SEMI
    (15) statement -> . IF L_PAR expression R_PAR statement ELSE statement
    (16) statement -> . IF L_PAR expression R_PAR statement
    (17) statement -> . WHILE L_PAR expression R_PAR statement
    (18) statement -> . L_BRC block R_BRC
    (19) statement -> . BREAK SEMI
    (20) statement -> . CONTINUE SEMI
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    IDEN            shift and go to state 5
    LET             shift and go to state 6
    RETURN          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 10
    L_BRC           shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    program                        shift and go to state 1
    block                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (6) block -> statement .
    (7) block -> statement . block
    (6) block -> . statement
    (7) block -> . statement block
    (8) statement -> . expression SEMI
    (9) statement -> . IDEN ASSIGN expression SEMI
    (10) statement -> . LET IDEN SEMI
    (11) statement -> . LET IDEN COLON type SEMI
    (12) statement -> . LET IDEN ASSIGN expression SEMI
    (13) statement -> . LET IDEN COLON type ASSIGN expression SEMI
    (14) statement -> . RETURN expression SEMI
    (15) statement -> . IF L_PAR expression R_PAR statement ELSE statement
    (16) statement -> . IF L_PAR expression R_PAR statement
    (17) statement -> . WHILE L_PAR expression R_PAR statement
    (18) statement -> . L_BRC block R_BRC
    (19) statement -> . BREAK SEMI
    (20) statement -> . CONTINUE SEMI
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    $end            reduce using rule 6 (block -> statement .)
    R_BRC           reduce using rule 6 (block -> statement .)
    IDEN            shift and go to state 5
    LET             shift and go to state 6
    RETURN          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 10
    L_BRC           shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    statement                      shift and go to state 3
    block                          shift and go to state 23
    expression                     shift and go to state 4
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 4

    (8) statement -> expression . SEMI
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    SEMI            shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    L_PAR           shift and go to state 29


state 5

    (9) statement -> IDEN . ASSIGN expression SEMI
    (29) expression -> IDEN .

    ASSIGN          shift and go to state 30
    SEMI            reduce using rule 29 (expression -> IDEN .)
    PLUS            reduce using rule 29 (expression -> IDEN .)
    MINUS           reduce using rule 29 (expression -> IDEN .)
    MULTIPLY        reduce using rule 29 (expression -> IDEN .)
    DIVIDE          reduce using rule 29 (expression -> IDEN .)
    L_PAR           reduce using rule 29 (expression -> IDEN .)


state 6

    (10) statement -> LET . IDEN SEMI
    (11) statement -> LET . IDEN COLON type SEMI
    (12) statement -> LET . IDEN ASSIGN expression SEMI
    (13) statement -> LET . IDEN COLON type ASSIGN expression SEMI

    IDEN            shift and go to state 31


state 7

    (14) statement -> RETURN . expression SEMI
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 32
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 8

    (15) statement -> IF . L_PAR expression R_PAR statement ELSE statement
    (16) statement -> IF . L_PAR expression R_PAR statement

    L_PAR           shift and go to state 34


state 9

    (23) expression -> L_PAR . expression R_PAR
    (42) lambda -> L_PAR . R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> L_PAR . param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> L_PAR . IDEN R_PAR ARROW L_BRC block R_BRC
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (38) param_list -> . IDEN COMMA param_list
    (39) param_list -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    R_PAR           shift and go to state 36
    IDEN            shift and go to state 38
    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 35
    param_list                     shift and go to state 37
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 10

    (17) statement -> WHILE . L_PAR expression R_PAR statement

    L_PAR           shift and go to state 39


state 11

    (18) statement -> L_BRC . block R_BRC
    (6) block -> . statement
    (7) block -> . statement block
    (8) statement -> . expression SEMI
    (9) statement -> . IDEN ASSIGN expression SEMI
    (10) statement -> . LET IDEN SEMI
    (11) statement -> . LET IDEN COLON type SEMI
    (12) statement -> . LET IDEN ASSIGN expression SEMI
    (13) statement -> . LET IDEN COLON type ASSIGN expression SEMI
    (14) statement -> . RETURN expression SEMI
    (15) statement -> . IF L_PAR expression R_PAR statement ELSE statement
    (16) statement -> . IF L_PAR expression R_PAR statement
    (17) statement -> . WHILE L_PAR expression R_PAR statement
    (18) statement -> . L_BRC block R_BRC
    (19) statement -> . BREAK SEMI
    (20) statement -> . CONTINUE SEMI
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    IDEN            shift and go to state 5
    LET             shift and go to state 6
    RETURN          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 10
    L_BRC           shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    block                          shift and go to state 40
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 12

    (19) statement -> BREAK . SEMI

    SEMI            shift and go to state 41


state 13

    (20) statement -> CONTINUE . SEMI

    SEMI            shift and go to state 42


state 14

    (21) expression -> binary_operation .

    SEMI            reduce using rule 21 (expression -> binary_operation .)
    PLUS            reduce using rule 21 (expression -> binary_operation .)
    MINUS           reduce using rule 21 (expression -> binary_operation .)
    MULTIPLY        reduce using rule 21 (expression -> binary_operation .)
    DIVIDE          reduce using rule 21 (expression -> binary_operation .)
    L_PAR           reduce using rule 21 (expression -> binary_operation .)
    R_PAR           reduce using rule 21 (expression -> binary_operation .)
    COMMA           reduce using rule 21 (expression -> binary_operation .)


state 15

    (22) expression -> unary_operation .

    SEMI            reduce using rule 22 (expression -> unary_operation .)
    PLUS            reduce using rule 22 (expression -> unary_operation .)
    MINUS           reduce using rule 22 (expression -> unary_operation .)
    MULTIPLY        reduce using rule 22 (expression -> unary_operation .)
    DIVIDE          reduce using rule 22 (expression -> unary_operation .)
    L_PAR           reduce using rule 22 (expression -> unary_operation .)
    R_PAR           reduce using rule 22 (expression -> unary_operation .)
    COMMA           reduce using rule 22 (expression -> unary_operation .)


state 16

    (24) expression -> NUM_LIT .

    SEMI            reduce using rule 24 (expression -> NUM_LIT .)
    PLUS            reduce using rule 24 (expression -> NUM_LIT .)
    MINUS           reduce using rule 24 (expression -> NUM_LIT .)
    MULTIPLY        reduce using rule 24 (expression -> NUM_LIT .)
    DIVIDE          reduce using rule 24 (expression -> NUM_LIT .)
    L_PAR           reduce using rule 24 (expression -> NUM_LIT .)
    R_PAR           reduce using rule 24 (expression -> NUM_LIT .)
    COMMA           reduce using rule 24 (expression -> NUM_LIT .)


state 17

    (25) expression -> BOOL_LIT .

    SEMI            reduce using rule 25 (expression -> BOOL_LIT .)
    PLUS            reduce using rule 25 (expression -> BOOL_LIT .)
    MINUS           reduce using rule 25 (expression -> BOOL_LIT .)
    MULTIPLY        reduce using rule 25 (expression -> BOOL_LIT .)
    DIVIDE          reduce using rule 25 (expression -> BOOL_LIT .)
    L_PAR           reduce using rule 25 (expression -> BOOL_LIT .)
    R_PAR           reduce using rule 25 (expression -> BOOL_LIT .)
    COMMA           reduce using rule 25 (expression -> BOOL_LIT .)


state 18

    (26) expression -> STR_LIT .

    SEMI            reduce using rule 26 (expression -> STR_LIT .)
    PLUS            reduce using rule 26 (expression -> STR_LIT .)
    MINUS           reduce using rule 26 (expression -> STR_LIT .)
    MULTIPLY        reduce using rule 26 (expression -> STR_LIT .)
    DIVIDE          reduce using rule 26 (expression -> STR_LIT .)
    L_PAR           reduce using rule 26 (expression -> STR_LIT .)
    R_PAR           reduce using rule 26 (expression -> STR_LIT .)
    COMMA           reduce using rule 26 (expression -> STR_LIT .)


state 19

    (27) expression -> function_call .

    SEMI            reduce using rule 27 (expression -> function_call .)
    PLUS            reduce using rule 27 (expression -> function_call .)
    MINUS           reduce using rule 27 (expression -> function_call .)
    MULTIPLY        reduce using rule 27 (expression -> function_call .)
    DIVIDE          reduce using rule 27 (expression -> function_call .)
    L_PAR           reduce using rule 27 (expression -> function_call .)
    R_PAR           reduce using rule 27 (expression -> function_call .)
    COMMA           reduce using rule 27 (expression -> function_call .)


state 20

    (28) expression -> lambda .

    SEMI            reduce using rule 28 (expression -> lambda .)
    PLUS            reduce using rule 28 (expression -> lambda .)
    MINUS           reduce using rule 28 (expression -> lambda .)
    MULTIPLY        reduce using rule 28 (expression -> lambda .)
    DIVIDE          reduce using rule 28 (expression -> lambda .)
    L_PAR           reduce using rule 28 (expression -> lambda .)
    R_PAR           reduce using rule 28 (expression -> lambda .)
    COMMA           reduce using rule 28 (expression -> lambda .)


state 21

    (34) unary_operation -> PLUS . expression
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 43
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 22

    (35) unary_operation -> MINUS . expression
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 44
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 23

    (7) block -> statement block .

    $end            reduce using rule 7 (block -> statement block .)
    R_BRC           reduce using rule 7 (block -> statement block .)


state 24

    (8) statement -> expression SEMI .

    IDEN            reduce using rule 8 (statement -> expression SEMI .)
    LET             reduce using rule 8 (statement -> expression SEMI .)
    RETURN          reduce using rule 8 (statement -> expression SEMI .)
    IF              reduce using rule 8 (statement -> expression SEMI .)
    WHILE           reduce using rule 8 (statement -> expression SEMI .)
    L_BRC           reduce using rule 8 (statement -> expression SEMI .)
    BREAK           reduce using rule 8 (statement -> expression SEMI .)
    CONTINUE        reduce using rule 8 (statement -> expression SEMI .)
    L_PAR           reduce using rule 8 (statement -> expression SEMI .)
    NUM_LIT         reduce using rule 8 (statement -> expression SEMI .)
    BOOL_LIT        reduce using rule 8 (statement -> expression SEMI .)
    STR_LIT         reduce using rule 8 (statement -> expression SEMI .)
    PLUS            reduce using rule 8 (statement -> expression SEMI .)
    MINUS           reduce using rule 8 (statement -> expression SEMI .)
    $end            reduce using rule 8 (statement -> expression SEMI .)
    R_BRC           reduce using rule 8 (statement -> expression SEMI .)
    ELSE            reduce using rule 8 (statement -> expression SEMI .)


state 25

    (30) binary_operation -> expression PLUS . expression
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 45
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 26

    (31) binary_operation -> expression MINUS . expression
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 46
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 27

    (32) binary_operation -> expression MULTIPLY . expression
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 47
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 28

    (33) binary_operation -> expression DIVIDE . expression
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 48
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 29

    (40) function_call -> expression L_PAR . R_PAR
    (41) function_call -> expression L_PAR . arg_list R_PAR
    (36) arg_list -> . expression
    (37) arg_list -> . expression COMMA arg_list
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    R_PAR           shift and go to state 50
    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 49
    arg_list                       shift and go to state 51
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 30

    (9) statement -> IDEN ASSIGN . expression SEMI
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 52
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 31

    (10) statement -> LET IDEN . SEMI
    (11) statement -> LET IDEN . COLON type SEMI
    (12) statement -> LET IDEN . ASSIGN expression SEMI
    (13) statement -> LET IDEN . COLON type ASSIGN expression SEMI

    SEMI            shift and go to state 53
    COLON           shift and go to state 54
    ASSIGN          shift and go to state 55


state 32

    (14) statement -> RETURN expression . SEMI
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    SEMI            shift and go to state 56
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    L_PAR           shift and go to state 29


state 33

    (29) expression -> IDEN .

    SEMI            reduce using rule 29 (expression -> IDEN .)
    PLUS            reduce using rule 29 (expression -> IDEN .)
    MINUS           reduce using rule 29 (expression -> IDEN .)
    MULTIPLY        reduce using rule 29 (expression -> IDEN .)
    DIVIDE          reduce using rule 29 (expression -> IDEN .)
    L_PAR           reduce using rule 29 (expression -> IDEN .)
    R_PAR           reduce using rule 29 (expression -> IDEN .)
    COMMA           reduce using rule 29 (expression -> IDEN .)


state 34

    (15) statement -> IF L_PAR . expression R_PAR statement ELSE statement
    (16) statement -> IF L_PAR . expression R_PAR statement
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 57
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 35

    (23) expression -> L_PAR expression . R_PAR
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    R_PAR           shift and go to state 58
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    L_PAR           shift and go to state 29


state 36

    (42) lambda -> L_PAR R_PAR . ARROW L_BRC block R_BRC

    ARROW           shift and go to state 59


state 37

    (43) lambda -> L_PAR param_list . R_PAR ARROW L_BRC block R_BRC

    R_PAR           shift and go to state 60


state 38

    (44) lambda -> L_PAR IDEN . R_PAR ARROW L_BRC block R_BRC
    (29) expression -> IDEN .
    (38) param_list -> IDEN . COMMA param_list
    (39) param_list -> IDEN .

  ! shift/reduce conflict for R_PAR resolved as shift
  ! shift/reduce conflict for R_PAR resolved as shift
    R_PAR           shift and go to state 61
    PLUS            reduce using rule 29 (expression -> IDEN .)
    MINUS           reduce using rule 29 (expression -> IDEN .)
    MULTIPLY        reduce using rule 29 (expression -> IDEN .)
    DIVIDE          reduce using rule 29 (expression -> IDEN .)
    L_PAR           reduce using rule 29 (expression -> IDEN .)
    COMMA           shift and go to state 62

  ! R_PAR           [ reduce using rule 29 (expression -> IDEN .) ]
  ! R_PAR           [ reduce using rule 39 (param_list -> IDEN .) ]


state 39

    (17) statement -> WHILE L_PAR . expression R_PAR statement
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 63
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 40

    (18) statement -> L_BRC block . R_BRC

    R_BRC           shift and go to state 64


state 41

    (19) statement -> BREAK SEMI .

    IDEN            reduce using rule 19 (statement -> BREAK SEMI .)
    LET             reduce using rule 19 (statement -> BREAK SEMI .)
    RETURN          reduce using rule 19 (statement -> BREAK SEMI .)
    IF              reduce using rule 19 (statement -> BREAK SEMI .)
    WHILE           reduce using rule 19 (statement -> BREAK SEMI .)
    L_BRC           reduce using rule 19 (statement -> BREAK SEMI .)
    BREAK           reduce using rule 19 (statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 19 (statement -> BREAK SEMI .)
    L_PAR           reduce using rule 19 (statement -> BREAK SEMI .)
    NUM_LIT         reduce using rule 19 (statement -> BREAK SEMI .)
    BOOL_LIT        reduce using rule 19 (statement -> BREAK SEMI .)
    STR_LIT         reduce using rule 19 (statement -> BREAK SEMI .)
    PLUS            reduce using rule 19 (statement -> BREAK SEMI .)
    MINUS           reduce using rule 19 (statement -> BREAK SEMI .)
    $end            reduce using rule 19 (statement -> BREAK SEMI .)
    R_BRC           reduce using rule 19 (statement -> BREAK SEMI .)
    ELSE            reduce using rule 19 (statement -> BREAK SEMI .)


state 42

    (20) statement -> CONTINUE SEMI .

    IDEN            reduce using rule 20 (statement -> CONTINUE SEMI .)
    LET             reduce using rule 20 (statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 20 (statement -> CONTINUE SEMI .)
    IF              reduce using rule 20 (statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 20 (statement -> CONTINUE SEMI .)
    L_BRC           reduce using rule 20 (statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 20 (statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 20 (statement -> CONTINUE SEMI .)
    L_PAR           reduce using rule 20 (statement -> CONTINUE SEMI .)
    NUM_LIT         reduce using rule 20 (statement -> CONTINUE SEMI .)
    BOOL_LIT        reduce using rule 20 (statement -> CONTINUE SEMI .)
    STR_LIT         reduce using rule 20 (statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 20 (statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 20 (statement -> CONTINUE SEMI .)
    $end            reduce using rule 20 (statement -> CONTINUE SEMI .)
    R_BRC           reduce using rule 20 (statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 20 (statement -> CONTINUE SEMI .)


state 43

    (34) unary_operation -> PLUS expression .
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    SEMI            reduce using rule 34 (unary_operation -> PLUS expression .)
    PLUS            reduce using rule 34 (unary_operation -> PLUS expression .)
    MINUS           reduce using rule 34 (unary_operation -> PLUS expression .)
    MULTIPLY        reduce using rule 34 (unary_operation -> PLUS expression .)
    DIVIDE          reduce using rule 34 (unary_operation -> PLUS expression .)
    L_PAR           reduce using rule 34 (unary_operation -> PLUS expression .)
    R_PAR           reduce using rule 34 (unary_operation -> PLUS expression .)
    COMMA           reduce using rule 34 (unary_operation -> PLUS expression .)

  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! L_PAR           [ shift and go to state 29 ]


state 44

    (35) unary_operation -> MINUS expression .
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    SEMI            reduce using rule 35 (unary_operation -> MINUS expression .)
    PLUS            reduce using rule 35 (unary_operation -> MINUS expression .)
    MINUS           reduce using rule 35 (unary_operation -> MINUS expression .)
    MULTIPLY        reduce using rule 35 (unary_operation -> MINUS expression .)
    DIVIDE          reduce using rule 35 (unary_operation -> MINUS expression .)
    L_PAR           reduce using rule 35 (unary_operation -> MINUS expression .)
    R_PAR           reduce using rule 35 (unary_operation -> MINUS expression .)
    COMMA           reduce using rule 35 (unary_operation -> MINUS expression .)

  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! L_PAR           [ shift and go to state 29 ]


state 45

    (30) binary_operation -> expression PLUS expression .
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    SEMI            reduce using rule 30 (binary_operation -> expression PLUS expression .)
    PLUS            reduce using rule 30 (binary_operation -> expression PLUS expression .)
    MINUS           reduce using rule 30 (binary_operation -> expression PLUS expression .)
    L_PAR           reduce using rule 30 (binary_operation -> expression PLUS expression .)
    R_PAR           reduce using rule 30 (binary_operation -> expression PLUS expression .)
    COMMA           reduce using rule 30 (binary_operation -> expression PLUS expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28

  ! MULTIPLY        [ reduce using rule 30 (binary_operation -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 30 (binary_operation -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! L_PAR           [ shift and go to state 29 ]


state 46

    (31) binary_operation -> expression MINUS expression .
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    SEMI            reduce using rule 31 (binary_operation -> expression MINUS expression .)
    PLUS            reduce using rule 31 (binary_operation -> expression MINUS expression .)
    MINUS           reduce using rule 31 (binary_operation -> expression MINUS expression .)
    L_PAR           reduce using rule 31 (binary_operation -> expression MINUS expression .)
    R_PAR           reduce using rule 31 (binary_operation -> expression MINUS expression .)
    COMMA           reduce using rule 31 (binary_operation -> expression MINUS expression .)
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28

  ! MULTIPLY        [ reduce using rule 31 (binary_operation -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 31 (binary_operation -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! L_PAR           [ shift and go to state 29 ]


state 47

    (32) binary_operation -> expression MULTIPLY expression .
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    SEMI            reduce using rule 32 (binary_operation -> expression MULTIPLY expression .)
    PLUS            reduce using rule 32 (binary_operation -> expression MULTIPLY expression .)
    MINUS           reduce using rule 32 (binary_operation -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 32 (binary_operation -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 32 (binary_operation -> expression MULTIPLY expression .)
    L_PAR           reduce using rule 32 (binary_operation -> expression MULTIPLY expression .)
    R_PAR           reduce using rule 32 (binary_operation -> expression MULTIPLY expression .)
    COMMA           reduce using rule 32 (binary_operation -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! L_PAR           [ shift and go to state 29 ]


state 48

    (33) binary_operation -> expression DIVIDE expression .
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    SEMI            reduce using rule 33 (binary_operation -> expression DIVIDE expression .)
    PLUS            reduce using rule 33 (binary_operation -> expression DIVIDE expression .)
    MINUS           reduce using rule 33 (binary_operation -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 33 (binary_operation -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 33 (binary_operation -> expression DIVIDE expression .)
    L_PAR           reduce using rule 33 (binary_operation -> expression DIVIDE expression .)
    R_PAR           reduce using rule 33 (binary_operation -> expression DIVIDE expression .)
    COMMA           reduce using rule 33 (binary_operation -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! MULTIPLY        [ shift and go to state 27 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! L_PAR           [ shift and go to state 29 ]


state 49

    (36) arg_list -> expression .
    (37) arg_list -> expression . COMMA arg_list
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    R_PAR           reduce using rule 36 (arg_list -> expression .)
    COMMA           shift and go to state 65
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    L_PAR           shift and go to state 29


state 50

    (40) function_call -> expression L_PAR R_PAR .

    SEMI            reduce using rule 40 (function_call -> expression L_PAR R_PAR .)
    PLUS            reduce using rule 40 (function_call -> expression L_PAR R_PAR .)
    MINUS           reduce using rule 40 (function_call -> expression L_PAR R_PAR .)
    MULTIPLY        reduce using rule 40 (function_call -> expression L_PAR R_PAR .)
    DIVIDE          reduce using rule 40 (function_call -> expression L_PAR R_PAR .)
    L_PAR           reduce using rule 40 (function_call -> expression L_PAR R_PAR .)
    R_PAR           reduce using rule 40 (function_call -> expression L_PAR R_PAR .)
    COMMA           reduce using rule 40 (function_call -> expression L_PAR R_PAR .)


state 51

    (41) function_call -> expression L_PAR arg_list . R_PAR

    R_PAR           shift and go to state 66


state 52

    (9) statement -> IDEN ASSIGN expression . SEMI
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    SEMI            shift and go to state 67
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    L_PAR           shift and go to state 29


state 53

    (10) statement -> LET IDEN SEMI .

    IDEN            reduce using rule 10 (statement -> LET IDEN SEMI .)
    LET             reduce using rule 10 (statement -> LET IDEN SEMI .)
    RETURN          reduce using rule 10 (statement -> LET IDEN SEMI .)
    IF              reduce using rule 10 (statement -> LET IDEN SEMI .)
    WHILE           reduce using rule 10 (statement -> LET IDEN SEMI .)
    L_BRC           reduce using rule 10 (statement -> LET IDEN SEMI .)
    BREAK           reduce using rule 10 (statement -> LET IDEN SEMI .)
    CONTINUE        reduce using rule 10 (statement -> LET IDEN SEMI .)
    L_PAR           reduce using rule 10 (statement -> LET IDEN SEMI .)
    NUM_LIT         reduce using rule 10 (statement -> LET IDEN SEMI .)
    BOOL_LIT        reduce using rule 10 (statement -> LET IDEN SEMI .)
    STR_LIT         reduce using rule 10 (statement -> LET IDEN SEMI .)
    PLUS            reduce using rule 10 (statement -> LET IDEN SEMI .)
    MINUS           reduce using rule 10 (statement -> LET IDEN SEMI .)
    $end            reduce using rule 10 (statement -> LET IDEN SEMI .)
    R_BRC           reduce using rule 10 (statement -> LET IDEN SEMI .)
    ELSE            reduce using rule 10 (statement -> LET IDEN SEMI .)


state 54

    (11) statement -> LET IDEN COLON . type SEMI
    (13) statement -> LET IDEN COLON . type ASSIGN expression SEMI
    (2) type -> . NUMBER
    (3) type -> . BOOL
    (4) type -> . STRING
    (5) type -> . ANY

    NUMBER          shift and go to state 69
    BOOL            shift and go to state 70
    STRING          shift and go to state 71
    ANY             shift and go to state 72

    type                           shift and go to state 68

state 55

    (12) statement -> LET IDEN ASSIGN . expression SEMI
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 73
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 56

    (14) statement -> RETURN expression SEMI .

    IDEN            reduce using rule 14 (statement -> RETURN expression SEMI .)
    LET             reduce using rule 14 (statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 14 (statement -> RETURN expression SEMI .)
    IF              reduce using rule 14 (statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 14 (statement -> RETURN expression SEMI .)
    L_BRC           reduce using rule 14 (statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 14 (statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 14 (statement -> RETURN expression SEMI .)
    L_PAR           reduce using rule 14 (statement -> RETURN expression SEMI .)
    NUM_LIT         reduce using rule 14 (statement -> RETURN expression SEMI .)
    BOOL_LIT        reduce using rule 14 (statement -> RETURN expression SEMI .)
    STR_LIT         reduce using rule 14 (statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 14 (statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 14 (statement -> RETURN expression SEMI .)
    $end            reduce using rule 14 (statement -> RETURN expression SEMI .)
    R_BRC           reduce using rule 14 (statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 14 (statement -> RETURN expression SEMI .)


state 57

    (15) statement -> IF L_PAR expression . R_PAR statement ELSE statement
    (16) statement -> IF L_PAR expression . R_PAR statement
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    R_PAR           shift and go to state 74
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    L_PAR           shift and go to state 29


state 58

    (23) expression -> L_PAR expression R_PAR .

    SEMI            reduce using rule 23 (expression -> L_PAR expression R_PAR .)
    PLUS            reduce using rule 23 (expression -> L_PAR expression R_PAR .)
    MINUS           reduce using rule 23 (expression -> L_PAR expression R_PAR .)
    MULTIPLY        reduce using rule 23 (expression -> L_PAR expression R_PAR .)
    DIVIDE          reduce using rule 23 (expression -> L_PAR expression R_PAR .)
    L_PAR           reduce using rule 23 (expression -> L_PAR expression R_PAR .)
    R_PAR           reduce using rule 23 (expression -> L_PAR expression R_PAR .)
    COMMA           reduce using rule 23 (expression -> L_PAR expression R_PAR .)


state 59

    (42) lambda -> L_PAR R_PAR ARROW . L_BRC block R_BRC

    L_BRC           shift and go to state 75


state 60

    (43) lambda -> L_PAR param_list R_PAR . ARROW L_BRC block R_BRC

    ARROW           shift and go to state 76


state 61

    (44) lambda -> L_PAR IDEN R_PAR . ARROW L_BRC block R_BRC

    ARROW           shift and go to state 77


state 62

    (38) param_list -> IDEN COMMA . param_list
    (38) param_list -> . IDEN COMMA param_list
    (39) param_list -> . IDEN

    IDEN            shift and go to state 78

    param_list                     shift and go to state 79

state 63

    (17) statement -> WHILE L_PAR expression . R_PAR statement
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    R_PAR           shift and go to state 80
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    L_PAR           shift and go to state 29


state 64

    (18) statement -> L_BRC block R_BRC .

    IDEN            reduce using rule 18 (statement -> L_BRC block R_BRC .)
    LET             reduce using rule 18 (statement -> L_BRC block R_BRC .)
    RETURN          reduce using rule 18 (statement -> L_BRC block R_BRC .)
    IF              reduce using rule 18 (statement -> L_BRC block R_BRC .)
    WHILE           reduce using rule 18 (statement -> L_BRC block R_BRC .)
    L_BRC           reduce using rule 18 (statement -> L_BRC block R_BRC .)
    BREAK           reduce using rule 18 (statement -> L_BRC block R_BRC .)
    CONTINUE        reduce using rule 18 (statement -> L_BRC block R_BRC .)
    L_PAR           reduce using rule 18 (statement -> L_BRC block R_BRC .)
    NUM_LIT         reduce using rule 18 (statement -> L_BRC block R_BRC .)
    BOOL_LIT        reduce using rule 18 (statement -> L_BRC block R_BRC .)
    STR_LIT         reduce using rule 18 (statement -> L_BRC block R_BRC .)
    PLUS            reduce using rule 18 (statement -> L_BRC block R_BRC .)
    MINUS           reduce using rule 18 (statement -> L_BRC block R_BRC .)
    $end            reduce using rule 18 (statement -> L_BRC block R_BRC .)
    R_BRC           reduce using rule 18 (statement -> L_BRC block R_BRC .)
    ELSE            reduce using rule 18 (statement -> L_BRC block R_BRC .)


state 65

    (37) arg_list -> expression COMMA . arg_list
    (36) arg_list -> . expression
    (37) arg_list -> . expression COMMA arg_list
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 49
    arg_list                       shift and go to state 81
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 66

    (41) function_call -> expression L_PAR arg_list R_PAR .

    SEMI            reduce using rule 41 (function_call -> expression L_PAR arg_list R_PAR .)
    PLUS            reduce using rule 41 (function_call -> expression L_PAR arg_list R_PAR .)
    MINUS           reduce using rule 41 (function_call -> expression L_PAR arg_list R_PAR .)
    MULTIPLY        reduce using rule 41 (function_call -> expression L_PAR arg_list R_PAR .)
    DIVIDE          reduce using rule 41 (function_call -> expression L_PAR arg_list R_PAR .)
    L_PAR           reduce using rule 41 (function_call -> expression L_PAR arg_list R_PAR .)
    R_PAR           reduce using rule 41 (function_call -> expression L_PAR arg_list R_PAR .)
    COMMA           reduce using rule 41 (function_call -> expression L_PAR arg_list R_PAR .)


state 67

    (9) statement -> IDEN ASSIGN expression SEMI .

    IDEN            reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    LET             reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    RETURN          reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    IF              reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    WHILE           reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    L_BRC           reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    BREAK           reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    CONTINUE        reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    L_PAR           reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    NUM_LIT         reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    BOOL_LIT        reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    STR_LIT         reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    PLUS            reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    MINUS           reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    $end            reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    R_BRC           reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)
    ELSE            reduce using rule 9 (statement -> IDEN ASSIGN expression SEMI .)


state 68

    (11) statement -> LET IDEN COLON type . SEMI
    (13) statement -> LET IDEN COLON type . ASSIGN expression SEMI

    SEMI            shift and go to state 82
    ASSIGN          shift and go to state 83


state 69

    (2) type -> NUMBER .

    SEMI            reduce using rule 2 (type -> NUMBER .)
    ASSIGN          reduce using rule 2 (type -> NUMBER .)


state 70

    (3) type -> BOOL .

    SEMI            reduce using rule 3 (type -> BOOL .)
    ASSIGN          reduce using rule 3 (type -> BOOL .)


state 71

    (4) type -> STRING .

    SEMI            reduce using rule 4 (type -> STRING .)
    ASSIGN          reduce using rule 4 (type -> STRING .)


state 72

    (5) type -> ANY .

    SEMI            reduce using rule 5 (type -> ANY .)
    ASSIGN          reduce using rule 5 (type -> ANY .)


state 73

    (12) statement -> LET IDEN ASSIGN expression . SEMI
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    SEMI            shift and go to state 84
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    L_PAR           shift and go to state 29


state 74

    (15) statement -> IF L_PAR expression R_PAR . statement ELSE statement
    (16) statement -> IF L_PAR expression R_PAR . statement
    (8) statement -> . expression SEMI
    (9) statement -> . IDEN ASSIGN expression SEMI
    (10) statement -> . LET IDEN SEMI
    (11) statement -> . LET IDEN COLON type SEMI
    (12) statement -> . LET IDEN ASSIGN expression SEMI
    (13) statement -> . LET IDEN COLON type ASSIGN expression SEMI
    (14) statement -> . RETURN expression SEMI
    (15) statement -> . IF L_PAR expression R_PAR statement ELSE statement
    (16) statement -> . IF L_PAR expression R_PAR statement
    (17) statement -> . WHILE L_PAR expression R_PAR statement
    (18) statement -> . L_BRC block R_BRC
    (19) statement -> . BREAK SEMI
    (20) statement -> . CONTINUE SEMI
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    IDEN            shift and go to state 5
    LET             shift and go to state 6
    RETURN          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 10
    L_BRC           shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 4
    statement                      shift and go to state 85
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 75

    (42) lambda -> L_PAR R_PAR ARROW L_BRC . block R_BRC
    (6) block -> . statement
    (7) block -> . statement block
    (8) statement -> . expression SEMI
    (9) statement -> . IDEN ASSIGN expression SEMI
    (10) statement -> . LET IDEN SEMI
    (11) statement -> . LET IDEN COLON type SEMI
    (12) statement -> . LET IDEN ASSIGN expression SEMI
    (13) statement -> . LET IDEN COLON type ASSIGN expression SEMI
    (14) statement -> . RETURN expression SEMI
    (15) statement -> . IF L_PAR expression R_PAR statement ELSE statement
    (16) statement -> . IF L_PAR expression R_PAR statement
    (17) statement -> . WHILE L_PAR expression R_PAR statement
    (18) statement -> . L_BRC block R_BRC
    (19) statement -> . BREAK SEMI
    (20) statement -> . CONTINUE SEMI
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    IDEN            shift and go to state 5
    LET             shift and go to state 6
    RETURN          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 10
    L_BRC           shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    block                          shift and go to state 86
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 76

    (43) lambda -> L_PAR param_list R_PAR ARROW . L_BRC block R_BRC

    L_BRC           shift and go to state 87


state 77

    (44) lambda -> L_PAR IDEN R_PAR ARROW . L_BRC block R_BRC

    L_BRC           shift and go to state 88


state 78

    (38) param_list -> IDEN . COMMA param_list
    (39) param_list -> IDEN .

    COMMA           shift and go to state 62
    R_PAR           reduce using rule 39 (param_list -> IDEN .)


state 79

    (38) param_list -> IDEN COMMA param_list .

    R_PAR           reduce using rule 38 (param_list -> IDEN COMMA param_list .)


state 80

    (17) statement -> WHILE L_PAR expression R_PAR . statement
    (8) statement -> . expression SEMI
    (9) statement -> . IDEN ASSIGN expression SEMI
    (10) statement -> . LET IDEN SEMI
    (11) statement -> . LET IDEN COLON type SEMI
    (12) statement -> . LET IDEN ASSIGN expression SEMI
    (13) statement -> . LET IDEN COLON type ASSIGN expression SEMI
    (14) statement -> . RETURN expression SEMI
    (15) statement -> . IF L_PAR expression R_PAR statement ELSE statement
    (16) statement -> . IF L_PAR expression R_PAR statement
    (17) statement -> . WHILE L_PAR expression R_PAR statement
    (18) statement -> . L_BRC block R_BRC
    (19) statement -> . BREAK SEMI
    (20) statement -> . CONTINUE SEMI
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    IDEN            shift and go to state 5
    LET             shift and go to state 6
    RETURN          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 10
    L_BRC           shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 4
    statement                      shift and go to state 89
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 81

    (37) arg_list -> expression COMMA arg_list .

    R_PAR           reduce using rule 37 (arg_list -> expression COMMA arg_list .)


state 82

    (11) statement -> LET IDEN COLON type SEMI .

    IDEN            reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    LET             reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    RETURN          reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    IF              reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    WHILE           reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    L_BRC           reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    BREAK           reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    CONTINUE        reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    L_PAR           reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    NUM_LIT         reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    BOOL_LIT        reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    STR_LIT         reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    PLUS            reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    MINUS           reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    $end            reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    R_BRC           reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)
    ELSE            reduce using rule 11 (statement -> LET IDEN COLON type SEMI .)


state 83

    (13) statement -> LET IDEN COLON type ASSIGN . expression SEMI
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    IDEN            shift and go to state 33
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 90
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 84

    (12) statement -> LET IDEN ASSIGN expression SEMI .

    IDEN            reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    LET             reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    RETURN          reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    IF              reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    WHILE           reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    L_BRC           reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    BREAK           reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    CONTINUE        reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    L_PAR           reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    NUM_LIT         reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    BOOL_LIT        reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    STR_LIT         reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    PLUS            reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    MINUS           reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    $end            reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    R_BRC           reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)
    ELSE            reduce using rule 12 (statement -> LET IDEN ASSIGN expression SEMI .)


state 85

    (15) statement -> IF L_PAR expression R_PAR statement . ELSE statement
    (16) statement -> IF L_PAR expression R_PAR statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 91
    IDEN            reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    LET             reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    RETURN          reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    IF              reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    WHILE           reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    L_BRC           reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    BREAK           reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    CONTINUE        reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    L_PAR           reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    NUM_LIT         reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    BOOL_LIT        reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    STR_LIT         reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    PLUS            reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    MINUS           reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    $end            reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)
    R_BRC           reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .)

  ! ELSE            [ reduce using rule 16 (statement -> IF L_PAR expression R_PAR statement .) ]


state 86

    (42) lambda -> L_PAR R_PAR ARROW L_BRC block . R_BRC

    R_BRC           shift and go to state 92


state 87

    (43) lambda -> L_PAR param_list R_PAR ARROW L_BRC . block R_BRC
    (6) block -> . statement
    (7) block -> . statement block
    (8) statement -> . expression SEMI
    (9) statement -> . IDEN ASSIGN expression SEMI
    (10) statement -> . LET IDEN SEMI
    (11) statement -> . LET IDEN COLON type SEMI
    (12) statement -> . LET IDEN ASSIGN expression SEMI
    (13) statement -> . LET IDEN COLON type ASSIGN expression SEMI
    (14) statement -> . RETURN expression SEMI
    (15) statement -> . IF L_PAR expression R_PAR statement ELSE statement
    (16) statement -> . IF L_PAR expression R_PAR statement
    (17) statement -> . WHILE L_PAR expression R_PAR statement
    (18) statement -> . L_BRC block R_BRC
    (19) statement -> . BREAK SEMI
    (20) statement -> . CONTINUE SEMI
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    IDEN            shift and go to state 5
    LET             shift and go to state 6
    RETURN          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 10
    L_BRC           shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    block                          shift and go to state 93
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 88

    (44) lambda -> L_PAR IDEN R_PAR ARROW L_BRC . block R_BRC
    (6) block -> . statement
    (7) block -> . statement block
    (8) statement -> . expression SEMI
    (9) statement -> . IDEN ASSIGN expression SEMI
    (10) statement -> . LET IDEN SEMI
    (11) statement -> . LET IDEN COLON type SEMI
    (12) statement -> . LET IDEN ASSIGN expression SEMI
    (13) statement -> . LET IDEN COLON type ASSIGN expression SEMI
    (14) statement -> . RETURN expression SEMI
    (15) statement -> . IF L_PAR expression R_PAR statement ELSE statement
    (16) statement -> . IF L_PAR expression R_PAR statement
    (17) statement -> . WHILE L_PAR expression R_PAR statement
    (18) statement -> . L_BRC block R_BRC
    (19) statement -> . BREAK SEMI
    (20) statement -> . CONTINUE SEMI
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    IDEN            shift and go to state 5
    LET             shift and go to state 6
    RETURN          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 10
    L_BRC           shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    block                          shift and go to state 94
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 89

    (17) statement -> WHILE L_PAR expression R_PAR statement .

    IDEN            reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    LET             reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    RETURN          reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    IF              reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    WHILE           reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    L_BRC           reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    BREAK           reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    CONTINUE        reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    L_PAR           reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    NUM_LIT         reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    BOOL_LIT        reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    STR_LIT         reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    PLUS            reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    MINUS           reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    $end            reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    R_BRC           reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)
    ELSE            reduce using rule 17 (statement -> WHILE L_PAR expression R_PAR statement .)


state 90

    (13) statement -> LET IDEN COLON type ASSIGN expression . SEMI
    (30) binary_operation -> expression . PLUS expression
    (31) binary_operation -> expression . MINUS expression
    (32) binary_operation -> expression . MULTIPLY expression
    (33) binary_operation -> expression . DIVIDE expression
    (40) function_call -> expression . L_PAR R_PAR
    (41) function_call -> expression . L_PAR arg_list R_PAR

    SEMI            shift and go to state 95
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    L_PAR           shift and go to state 29


state 91

    (15) statement -> IF L_PAR expression R_PAR statement ELSE . statement
    (8) statement -> . expression SEMI
    (9) statement -> . IDEN ASSIGN expression SEMI
    (10) statement -> . LET IDEN SEMI
    (11) statement -> . LET IDEN COLON type SEMI
    (12) statement -> . LET IDEN ASSIGN expression SEMI
    (13) statement -> . LET IDEN COLON type ASSIGN expression SEMI
    (14) statement -> . RETURN expression SEMI
    (15) statement -> . IF L_PAR expression R_PAR statement ELSE statement
    (16) statement -> . IF L_PAR expression R_PAR statement
    (17) statement -> . WHILE L_PAR expression R_PAR statement
    (18) statement -> . L_BRC block R_BRC
    (19) statement -> . BREAK SEMI
    (20) statement -> . CONTINUE SEMI
    (21) expression -> . binary_operation
    (22) expression -> . unary_operation
    (23) expression -> . L_PAR expression R_PAR
    (24) expression -> . NUM_LIT
    (25) expression -> . BOOL_LIT
    (26) expression -> . STR_LIT
    (27) expression -> . function_call
    (28) expression -> . lambda
    (29) expression -> . IDEN
    (30) binary_operation -> . expression PLUS expression
    (31) binary_operation -> . expression MINUS expression
    (32) binary_operation -> . expression MULTIPLY expression
    (33) binary_operation -> . expression DIVIDE expression
    (34) unary_operation -> . PLUS expression
    (35) unary_operation -> . MINUS expression
    (40) function_call -> . expression L_PAR R_PAR
    (41) function_call -> . expression L_PAR arg_list R_PAR
    (42) lambda -> . L_PAR R_PAR ARROW L_BRC block R_BRC
    (43) lambda -> . L_PAR param_list R_PAR ARROW L_BRC block R_BRC
    (44) lambda -> . L_PAR IDEN R_PAR ARROW L_BRC block R_BRC

    IDEN            shift and go to state 5
    LET             shift and go to state 6
    RETURN          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 10
    L_BRC           shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    L_PAR           shift and go to state 9
    NUM_LIT         shift and go to state 16
    BOOL_LIT        shift and go to state 17
    STR_LIT         shift and go to state 18
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22

    expression                     shift and go to state 4
    statement                      shift and go to state 96
    binary_operation               shift and go to state 14
    unary_operation                shift and go to state 15
    function_call                  shift and go to state 19
    lambda                         shift and go to state 20

state 92

    (42) lambda -> L_PAR R_PAR ARROW L_BRC block R_BRC .

    SEMI            reduce using rule 42 (lambda -> L_PAR R_PAR ARROW L_BRC block R_BRC .)
    PLUS            reduce using rule 42 (lambda -> L_PAR R_PAR ARROW L_BRC block R_BRC .)
    MINUS           reduce using rule 42 (lambda -> L_PAR R_PAR ARROW L_BRC block R_BRC .)
    MULTIPLY        reduce using rule 42 (lambda -> L_PAR R_PAR ARROW L_BRC block R_BRC .)
    DIVIDE          reduce using rule 42 (lambda -> L_PAR R_PAR ARROW L_BRC block R_BRC .)
    L_PAR           reduce using rule 42 (lambda -> L_PAR R_PAR ARROW L_BRC block R_BRC .)
    R_PAR           reduce using rule 42 (lambda -> L_PAR R_PAR ARROW L_BRC block R_BRC .)
    COMMA           reduce using rule 42 (lambda -> L_PAR R_PAR ARROW L_BRC block R_BRC .)


state 93

    (43) lambda -> L_PAR param_list R_PAR ARROW L_BRC block . R_BRC

    R_BRC           shift and go to state 97


state 94

    (44) lambda -> L_PAR IDEN R_PAR ARROW L_BRC block . R_BRC

    R_BRC           shift and go to state 98


state 95

    (13) statement -> LET IDEN COLON type ASSIGN expression SEMI .

    IDEN            reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    LET             reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    RETURN          reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    IF              reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    WHILE           reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    L_BRC           reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    BREAK           reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    CONTINUE        reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    L_PAR           reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    NUM_LIT         reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    BOOL_LIT        reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    STR_LIT         reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    PLUS            reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    MINUS           reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    $end            reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    R_BRC           reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)
    ELSE            reduce using rule 13 (statement -> LET IDEN COLON type ASSIGN expression SEMI .)


state 96

    (15) statement -> IF L_PAR expression R_PAR statement ELSE statement .

    IDEN            reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    LET             reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    RETURN          reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    IF              reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    WHILE           reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    L_BRC           reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    BREAK           reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    CONTINUE        reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    L_PAR           reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    NUM_LIT         reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    BOOL_LIT        reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    STR_LIT         reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    PLUS            reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    MINUS           reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    $end            reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    R_BRC           reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)
    ELSE            reduce using rule 15 (statement -> IF L_PAR expression R_PAR statement ELSE statement .)


state 97

    (43) lambda -> L_PAR param_list R_PAR ARROW L_BRC block R_BRC .

    SEMI            reduce using rule 43 (lambda -> L_PAR param_list R_PAR ARROW L_BRC block R_BRC .)
    PLUS            reduce using rule 43 (lambda -> L_PAR param_list R_PAR ARROW L_BRC block R_BRC .)
    MINUS           reduce using rule 43 (lambda -> L_PAR param_list R_PAR ARROW L_BRC block R_BRC .)
    MULTIPLY        reduce using rule 43 (lambda -> L_PAR param_list R_PAR ARROW L_BRC block R_BRC .)
    DIVIDE          reduce using rule 43 (lambda -> L_PAR param_list R_PAR ARROW L_BRC block R_BRC .)
    L_PAR           reduce using rule 43 (lambda -> L_PAR param_list R_PAR ARROW L_BRC block R_BRC .)
    R_PAR           reduce using rule 43 (lambda -> L_PAR param_list R_PAR ARROW L_BRC block R_BRC .)
    COMMA           reduce using rule 43 (lambda -> L_PAR param_list R_PAR ARROW L_BRC block R_BRC .)


state 98

    (44) lambda -> L_PAR IDEN R_PAR ARROW L_BRC block R_BRC .

    SEMI            reduce using rule 44 (lambda -> L_PAR IDEN R_PAR ARROW L_BRC block R_BRC .)
    PLUS            reduce using rule 44 (lambda -> L_PAR IDEN R_PAR ARROW L_BRC block R_BRC .)
    MINUS           reduce using rule 44 (lambda -> L_PAR IDEN R_PAR ARROW L_BRC block R_BRC .)
    MULTIPLY        reduce using rule 44 (lambda -> L_PAR IDEN R_PAR ARROW L_BRC block R_BRC .)
    DIVIDE          reduce using rule 44 (lambda -> L_PAR IDEN R_PAR ARROW L_BRC block R_BRC .)
    L_PAR           reduce using rule 44 (lambda -> L_PAR IDEN R_PAR ARROW L_BRC block R_BRC .)
    R_PAR           reduce using rule 44 (lambda -> L_PAR IDEN R_PAR ARROW L_BRC block R_BRC .)
    COMMA           reduce using rule 44 (lambda -> L_PAR IDEN R_PAR ARROW L_BRC block R_BRC .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for R_PAR in state 38 resolved as shift
WARNING: shift/reduce conflict for R_PAR in state 38 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 85 resolved as shift
