Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement program
Rule 3     statement -> expression SEMI
Rule 4     statement -> IDEN ASSIGN expression SEMI
Rule 5     expression -> binary_operation
Rule 6     expression -> unary_operation
Rule 7     expression -> L_PAR expression R_PAR
Rule 8     expression -> NUMBER
Rule 9     expression -> IDEN
Rule 10    expression -> function_call
Rule 11    expression -> lambda
Rule 12    binary_operation -> expression PLUS expression
Rule 13    binary_operation -> expression MINUS expression
Rule 14    binary_operation -> expression MULTIPLY expression
Rule 15    binary_operation -> expression DIVIDE expression
Rule 16    unary_operation -> PLUS expression
Rule 17    unary_operation -> MINUS expression
Rule 18    arg_list -> expression
Rule 19    arg_list -> expression COMMA arg_list
Rule 20    function_call -> IDEN L_PAR R_PAR
Rule 21    function_call -> IDEN L_PAR arg_list R_PAR
Rule 22    lambda -> L_PAR R_PAR ARROW L_BRC program R_BRC
Rule 23    lambda -> L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

Terminals, with rules where they appear

ARROW                : 22 23
ASSIGN               : 4
COMMA                : 19
DIVIDE               : 15
IDEN                 : 4 9 20 21
L_BRC                : 22 23
L_PAR                : 7 20 21 22 23
MINUS                : 13 17
MULTIPLY             : 14
NUMBER               : 8
PLUS                 : 12 16
R_BRC                : 22 23
R_PAR                : 7 20 21 22 23
SEMI                 : 3 4
error                : 

Nonterminals, with rules where they appear

arg_list             : 19 21 23
binary_operation     : 5
expression           : 3 4 7 12 12 13 13 14 14 15 15 16 17 18 19
function_call        : 10
lambda               : 11
program              : 2 22 23 0
statement            : 1 2
unary_operation      : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . expression SEMI
    (4) statement -> . IDEN ASSIGN expression SEMI
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    IDEN            shift and go to state 4
    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    program                        shift and go to state 1
    statement                      shift and go to state 2
    expression                     shift and go to state 3
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .
    (2) program -> statement . program
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . expression SEMI
    (4) statement -> . IDEN ASSIGN expression SEMI
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    $end            reduce using rule 1 (program -> statement .)
    R_BRC           reduce using rule 1 (program -> statement .)
    IDEN            shift and go to state 4
    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    statement                      shift and go to state 2
    program                        shift and go to state 13
    expression                     shift and go to state 3
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 3

    (3) statement -> expression . SEMI
    (12) binary_operation -> expression . PLUS expression
    (13) binary_operation -> expression . MINUS expression
    (14) binary_operation -> expression . MULTIPLY expression
    (15) binary_operation -> expression . DIVIDE expression

    SEMI            shift and go to state 14
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 18


state 4

    (4) statement -> IDEN . ASSIGN expression SEMI
    (9) expression -> IDEN .
    (20) function_call -> IDEN . L_PAR R_PAR
    (21) function_call -> IDEN . L_PAR arg_list R_PAR

    ASSIGN          shift and go to state 19
    SEMI            reduce using rule 9 (expression -> IDEN .)
    PLUS            reduce using rule 9 (expression -> IDEN .)
    MINUS           reduce using rule 9 (expression -> IDEN .)
    MULTIPLY        reduce using rule 9 (expression -> IDEN .)
    DIVIDE          reduce using rule 9 (expression -> IDEN .)
    L_PAR           shift and go to state 20


state 5

    (5) expression -> binary_operation .

    SEMI            reduce using rule 5 (expression -> binary_operation .)
    PLUS            reduce using rule 5 (expression -> binary_operation .)
    MINUS           reduce using rule 5 (expression -> binary_operation .)
    MULTIPLY        reduce using rule 5 (expression -> binary_operation .)
    DIVIDE          reduce using rule 5 (expression -> binary_operation .)
    R_PAR           reduce using rule 5 (expression -> binary_operation .)
    COMMA           reduce using rule 5 (expression -> binary_operation .)


state 6

    (6) expression -> unary_operation .

    SEMI            reduce using rule 6 (expression -> unary_operation .)
    PLUS            reduce using rule 6 (expression -> unary_operation .)
    MINUS           reduce using rule 6 (expression -> unary_operation .)
    MULTIPLY        reduce using rule 6 (expression -> unary_operation .)
    DIVIDE          reduce using rule 6 (expression -> unary_operation .)
    R_PAR           reduce using rule 6 (expression -> unary_operation .)
    COMMA           reduce using rule 6 (expression -> unary_operation .)


state 7

    (7) expression -> L_PAR . expression R_PAR
    (22) lambda -> L_PAR . R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> L_PAR . arg_list R_PAR ARROW L_BRC program R_BRC
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (18) arg_list -> . expression
    (19) arg_list -> . expression COMMA arg_list
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    R_PAR           shift and go to state 22
    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    IDEN            shift and go to state 24
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    expression                     shift and go to state 21
    arg_list                       shift and go to state 23
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 8

    (8) expression -> NUMBER .

    SEMI            reduce using rule 8 (expression -> NUMBER .)
    PLUS            reduce using rule 8 (expression -> NUMBER .)
    MINUS           reduce using rule 8 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 8 (expression -> NUMBER .)
    DIVIDE          reduce using rule 8 (expression -> NUMBER .)
    R_PAR           reduce using rule 8 (expression -> NUMBER .)
    COMMA           reduce using rule 8 (expression -> NUMBER .)


state 9

    (10) expression -> function_call .

    SEMI            reduce using rule 10 (expression -> function_call .)
    PLUS            reduce using rule 10 (expression -> function_call .)
    MINUS           reduce using rule 10 (expression -> function_call .)
    MULTIPLY        reduce using rule 10 (expression -> function_call .)
    DIVIDE          reduce using rule 10 (expression -> function_call .)
    R_PAR           reduce using rule 10 (expression -> function_call .)
    COMMA           reduce using rule 10 (expression -> function_call .)


state 10

    (11) expression -> lambda .

    SEMI            reduce using rule 11 (expression -> lambda .)
    PLUS            reduce using rule 11 (expression -> lambda .)
    MINUS           reduce using rule 11 (expression -> lambda .)
    MULTIPLY        reduce using rule 11 (expression -> lambda .)
    DIVIDE          reduce using rule 11 (expression -> lambda .)
    R_PAR           reduce using rule 11 (expression -> lambda .)
    COMMA           reduce using rule 11 (expression -> lambda .)


state 11

    (16) unary_operation -> PLUS . expression
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    IDEN            shift and go to state 24
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    expression                     shift and go to state 25
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 12

    (17) unary_operation -> MINUS . expression
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    IDEN            shift and go to state 24
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    expression                     shift and go to state 26
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 13

    (2) program -> statement program .

    $end            reduce using rule 2 (program -> statement program .)
    R_BRC           reduce using rule 2 (program -> statement program .)


state 14

    (3) statement -> expression SEMI .

    IDEN            reduce using rule 3 (statement -> expression SEMI .)
    L_PAR           reduce using rule 3 (statement -> expression SEMI .)
    NUMBER          reduce using rule 3 (statement -> expression SEMI .)
    PLUS            reduce using rule 3 (statement -> expression SEMI .)
    MINUS           reduce using rule 3 (statement -> expression SEMI .)
    $end            reduce using rule 3 (statement -> expression SEMI .)
    R_BRC           reduce using rule 3 (statement -> expression SEMI .)


state 15

    (12) binary_operation -> expression PLUS . expression
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    IDEN            shift and go to state 24
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    expression                     shift and go to state 27
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 16

    (13) binary_operation -> expression MINUS . expression
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    IDEN            shift and go to state 24
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    expression                     shift and go to state 28
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 17

    (14) binary_operation -> expression MULTIPLY . expression
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    IDEN            shift and go to state 24
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    expression                     shift and go to state 29
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 18

    (15) binary_operation -> expression DIVIDE . expression
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    IDEN            shift and go to state 24
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    expression                     shift and go to state 30
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 19

    (4) statement -> IDEN ASSIGN . expression SEMI
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    IDEN            shift and go to state 24
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    expression                     shift and go to state 31
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 20

    (20) function_call -> IDEN L_PAR . R_PAR
    (21) function_call -> IDEN L_PAR . arg_list R_PAR
    (18) arg_list -> . expression
    (19) arg_list -> . expression COMMA arg_list
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    R_PAR           shift and go to state 32
    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    IDEN            shift and go to state 24
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    arg_list                       shift and go to state 33
    expression                     shift and go to state 34
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 21

    (7) expression -> L_PAR expression . R_PAR
    (18) arg_list -> expression .
    (19) arg_list -> expression . COMMA arg_list
    (12) binary_operation -> expression . PLUS expression
    (13) binary_operation -> expression . MINUS expression
    (14) binary_operation -> expression . MULTIPLY expression
    (15) binary_operation -> expression . DIVIDE expression

  ! shift/reduce conflict for R_PAR resolved as shift
    R_PAR           shift and go to state 35
    COMMA           shift and go to state 36
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 18

  ! R_PAR           [ reduce using rule 18 (arg_list -> expression .) ]


state 22

    (22) lambda -> L_PAR R_PAR . ARROW L_BRC program R_BRC

    ARROW           shift and go to state 37


state 23

    (23) lambda -> L_PAR arg_list . R_PAR ARROW L_BRC program R_BRC

    R_PAR           shift and go to state 38


state 24

    (9) expression -> IDEN .
    (20) function_call -> IDEN . L_PAR R_PAR
    (21) function_call -> IDEN . L_PAR arg_list R_PAR

    R_PAR           reduce using rule 9 (expression -> IDEN .)
    COMMA           reduce using rule 9 (expression -> IDEN .)
    PLUS            reduce using rule 9 (expression -> IDEN .)
    MINUS           reduce using rule 9 (expression -> IDEN .)
    MULTIPLY        reduce using rule 9 (expression -> IDEN .)
    DIVIDE          reduce using rule 9 (expression -> IDEN .)
    SEMI            reduce using rule 9 (expression -> IDEN .)
    L_PAR           shift and go to state 20


state 25

    (16) unary_operation -> PLUS expression .
    (12) binary_operation -> expression . PLUS expression
    (13) binary_operation -> expression . MINUS expression
    (14) binary_operation -> expression . MULTIPLY expression
    (15) binary_operation -> expression . DIVIDE expression

    SEMI            reduce using rule 16 (unary_operation -> PLUS expression .)
    PLUS            reduce using rule 16 (unary_operation -> PLUS expression .)
    MINUS           reduce using rule 16 (unary_operation -> PLUS expression .)
    MULTIPLY        reduce using rule 16 (unary_operation -> PLUS expression .)
    DIVIDE          reduce using rule 16 (unary_operation -> PLUS expression .)
    R_PAR           reduce using rule 16 (unary_operation -> PLUS expression .)
    COMMA           reduce using rule 16 (unary_operation -> PLUS expression .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]
  ! MULTIPLY        [ shift and go to state 17 ]
  ! DIVIDE          [ shift and go to state 18 ]


state 26

    (17) unary_operation -> MINUS expression .
    (12) binary_operation -> expression . PLUS expression
    (13) binary_operation -> expression . MINUS expression
    (14) binary_operation -> expression . MULTIPLY expression
    (15) binary_operation -> expression . DIVIDE expression

    SEMI            reduce using rule 17 (unary_operation -> MINUS expression .)
    PLUS            reduce using rule 17 (unary_operation -> MINUS expression .)
    MINUS           reduce using rule 17 (unary_operation -> MINUS expression .)
    MULTIPLY        reduce using rule 17 (unary_operation -> MINUS expression .)
    DIVIDE          reduce using rule 17 (unary_operation -> MINUS expression .)
    R_PAR           reduce using rule 17 (unary_operation -> MINUS expression .)
    COMMA           reduce using rule 17 (unary_operation -> MINUS expression .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]
  ! MULTIPLY        [ shift and go to state 17 ]
  ! DIVIDE          [ shift and go to state 18 ]


state 27

    (12) binary_operation -> expression PLUS expression .
    (12) binary_operation -> expression . PLUS expression
    (13) binary_operation -> expression . MINUS expression
    (14) binary_operation -> expression . MULTIPLY expression
    (15) binary_operation -> expression . DIVIDE expression

    SEMI            reduce using rule 12 (binary_operation -> expression PLUS expression .)
    PLUS            reduce using rule 12 (binary_operation -> expression PLUS expression .)
    MINUS           reduce using rule 12 (binary_operation -> expression PLUS expression .)
    R_PAR           reduce using rule 12 (binary_operation -> expression PLUS expression .)
    COMMA           reduce using rule 12 (binary_operation -> expression PLUS expression .)
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 18

  ! MULTIPLY        [ reduce using rule 12 (binary_operation -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 12 (binary_operation -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]


state 28

    (13) binary_operation -> expression MINUS expression .
    (12) binary_operation -> expression . PLUS expression
    (13) binary_operation -> expression . MINUS expression
    (14) binary_operation -> expression . MULTIPLY expression
    (15) binary_operation -> expression . DIVIDE expression

    SEMI            reduce using rule 13 (binary_operation -> expression MINUS expression .)
    PLUS            reduce using rule 13 (binary_operation -> expression MINUS expression .)
    MINUS           reduce using rule 13 (binary_operation -> expression MINUS expression .)
    R_PAR           reduce using rule 13 (binary_operation -> expression MINUS expression .)
    COMMA           reduce using rule 13 (binary_operation -> expression MINUS expression .)
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 18

  ! MULTIPLY        [ reduce using rule 13 (binary_operation -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 13 (binary_operation -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]


state 29

    (14) binary_operation -> expression MULTIPLY expression .
    (12) binary_operation -> expression . PLUS expression
    (13) binary_operation -> expression . MINUS expression
    (14) binary_operation -> expression . MULTIPLY expression
    (15) binary_operation -> expression . DIVIDE expression

    SEMI            reduce using rule 14 (binary_operation -> expression MULTIPLY expression .)
    PLUS            reduce using rule 14 (binary_operation -> expression MULTIPLY expression .)
    MINUS           reduce using rule 14 (binary_operation -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 14 (binary_operation -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 14 (binary_operation -> expression MULTIPLY expression .)
    R_PAR           reduce using rule 14 (binary_operation -> expression MULTIPLY expression .)
    COMMA           reduce using rule 14 (binary_operation -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]
  ! MULTIPLY        [ shift and go to state 17 ]
  ! DIVIDE          [ shift and go to state 18 ]


state 30

    (15) binary_operation -> expression DIVIDE expression .
    (12) binary_operation -> expression . PLUS expression
    (13) binary_operation -> expression . MINUS expression
    (14) binary_operation -> expression . MULTIPLY expression
    (15) binary_operation -> expression . DIVIDE expression

    SEMI            reduce using rule 15 (binary_operation -> expression DIVIDE expression .)
    PLUS            reduce using rule 15 (binary_operation -> expression DIVIDE expression .)
    MINUS           reduce using rule 15 (binary_operation -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 15 (binary_operation -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 15 (binary_operation -> expression DIVIDE expression .)
    R_PAR           reduce using rule 15 (binary_operation -> expression DIVIDE expression .)
    COMMA           reduce using rule 15 (binary_operation -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]
  ! MULTIPLY        [ shift and go to state 17 ]
  ! DIVIDE          [ shift and go to state 18 ]


state 31

    (4) statement -> IDEN ASSIGN expression . SEMI
    (12) binary_operation -> expression . PLUS expression
    (13) binary_operation -> expression . MINUS expression
    (14) binary_operation -> expression . MULTIPLY expression
    (15) binary_operation -> expression . DIVIDE expression

    SEMI            shift and go to state 39
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 18


state 32

    (20) function_call -> IDEN L_PAR R_PAR .

    SEMI            reduce using rule 20 (function_call -> IDEN L_PAR R_PAR .)
    PLUS            reduce using rule 20 (function_call -> IDEN L_PAR R_PAR .)
    MINUS           reduce using rule 20 (function_call -> IDEN L_PAR R_PAR .)
    MULTIPLY        reduce using rule 20 (function_call -> IDEN L_PAR R_PAR .)
    DIVIDE          reduce using rule 20 (function_call -> IDEN L_PAR R_PAR .)
    R_PAR           reduce using rule 20 (function_call -> IDEN L_PAR R_PAR .)
    COMMA           reduce using rule 20 (function_call -> IDEN L_PAR R_PAR .)


state 33

    (21) function_call -> IDEN L_PAR arg_list . R_PAR

    R_PAR           shift and go to state 40


state 34

    (18) arg_list -> expression .
    (19) arg_list -> expression . COMMA arg_list
    (12) binary_operation -> expression . PLUS expression
    (13) binary_operation -> expression . MINUS expression
    (14) binary_operation -> expression . MULTIPLY expression
    (15) binary_operation -> expression . DIVIDE expression

    R_PAR           reduce using rule 18 (arg_list -> expression .)
    COMMA           shift and go to state 36
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16
    MULTIPLY        shift and go to state 17
    DIVIDE          shift and go to state 18


state 35

    (7) expression -> L_PAR expression R_PAR .

    SEMI            reduce using rule 7 (expression -> L_PAR expression R_PAR .)
    PLUS            reduce using rule 7 (expression -> L_PAR expression R_PAR .)
    MINUS           reduce using rule 7 (expression -> L_PAR expression R_PAR .)
    MULTIPLY        reduce using rule 7 (expression -> L_PAR expression R_PAR .)
    DIVIDE          reduce using rule 7 (expression -> L_PAR expression R_PAR .)
    R_PAR           reduce using rule 7 (expression -> L_PAR expression R_PAR .)
    COMMA           reduce using rule 7 (expression -> L_PAR expression R_PAR .)


state 36

    (19) arg_list -> expression COMMA . arg_list
    (18) arg_list -> . expression
    (19) arg_list -> . expression COMMA arg_list
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    IDEN            shift and go to state 24
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    expression                     shift and go to state 34
    arg_list                       shift and go to state 41
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 37

    (22) lambda -> L_PAR R_PAR ARROW . L_BRC program R_BRC

    L_BRC           shift and go to state 42


state 38

    (23) lambda -> L_PAR arg_list R_PAR . ARROW L_BRC program R_BRC

    ARROW           shift and go to state 43


state 39

    (4) statement -> IDEN ASSIGN expression SEMI .

    IDEN            reduce using rule 4 (statement -> IDEN ASSIGN expression SEMI .)
    L_PAR           reduce using rule 4 (statement -> IDEN ASSIGN expression SEMI .)
    NUMBER          reduce using rule 4 (statement -> IDEN ASSIGN expression SEMI .)
    PLUS            reduce using rule 4 (statement -> IDEN ASSIGN expression SEMI .)
    MINUS           reduce using rule 4 (statement -> IDEN ASSIGN expression SEMI .)
    $end            reduce using rule 4 (statement -> IDEN ASSIGN expression SEMI .)
    R_BRC           reduce using rule 4 (statement -> IDEN ASSIGN expression SEMI .)


state 40

    (21) function_call -> IDEN L_PAR arg_list R_PAR .

    SEMI            reduce using rule 21 (function_call -> IDEN L_PAR arg_list R_PAR .)
    PLUS            reduce using rule 21 (function_call -> IDEN L_PAR arg_list R_PAR .)
    MINUS           reduce using rule 21 (function_call -> IDEN L_PAR arg_list R_PAR .)
    MULTIPLY        reduce using rule 21 (function_call -> IDEN L_PAR arg_list R_PAR .)
    DIVIDE          reduce using rule 21 (function_call -> IDEN L_PAR arg_list R_PAR .)
    R_PAR           reduce using rule 21 (function_call -> IDEN L_PAR arg_list R_PAR .)
    COMMA           reduce using rule 21 (function_call -> IDEN L_PAR arg_list R_PAR .)


state 41

    (19) arg_list -> expression COMMA arg_list .

    R_PAR           reduce using rule 19 (arg_list -> expression COMMA arg_list .)


state 42

    (22) lambda -> L_PAR R_PAR ARROW L_BRC . program R_BRC
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . expression SEMI
    (4) statement -> . IDEN ASSIGN expression SEMI
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    IDEN            shift and go to state 4
    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    program                        shift and go to state 44
    statement                      shift and go to state 2
    expression                     shift and go to state 3
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 43

    (23) lambda -> L_PAR arg_list R_PAR ARROW . L_BRC program R_BRC

    L_BRC           shift and go to state 45


state 44

    (22) lambda -> L_PAR R_PAR ARROW L_BRC program . R_BRC

    R_BRC           shift and go to state 46


state 45

    (23) lambda -> L_PAR arg_list R_PAR ARROW L_BRC . program R_BRC
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . expression SEMI
    (4) statement -> . IDEN ASSIGN expression SEMI
    (5) expression -> . binary_operation
    (6) expression -> . unary_operation
    (7) expression -> . L_PAR expression R_PAR
    (8) expression -> . NUMBER
    (9) expression -> . IDEN
    (10) expression -> . function_call
    (11) expression -> . lambda
    (12) binary_operation -> . expression PLUS expression
    (13) binary_operation -> . expression MINUS expression
    (14) binary_operation -> . expression MULTIPLY expression
    (15) binary_operation -> . expression DIVIDE expression
    (16) unary_operation -> . PLUS expression
    (17) unary_operation -> . MINUS expression
    (20) function_call -> . IDEN L_PAR R_PAR
    (21) function_call -> . IDEN L_PAR arg_list R_PAR
    (22) lambda -> . L_PAR R_PAR ARROW L_BRC program R_BRC
    (23) lambda -> . L_PAR arg_list R_PAR ARROW L_BRC program R_BRC

    IDEN            shift and go to state 4
    L_PAR           shift and go to state 7
    NUMBER          shift and go to state 8
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

    program                        shift and go to state 47
    statement                      shift and go to state 2
    expression                     shift and go to state 3
    binary_operation               shift and go to state 5
    unary_operation                shift and go to state 6
    function_call                  shift and go to state 9
    lambda                         shift and go to state 10

state 46

    (22) lambda -> L_PAR R_PAR ARROW L_BRC program R_BRC .

    SEMI            reduce using rule 22 (lambda -> L_PAR R_PAR ARROW L_BRC program R_BRC .)
    PLUS            reduce using rule 22 (lambda -> L_PAR R_PAR ARROW L_BRC program R_BRC .)
    MINUS           reduce using rule 22 (lambda -> L_PAR R_PAR ARROW L_BRC program R_BRC .)
    MULTIPLY        reduce using rule 22 (lambda -> L_PAR R_PAR ARROW L_BRC program R_BRC .)
    DIVIDE          reduce using rule 22 (lambda -> L_PAR R_PAR ARROW L_BRC program R_BRC .)
    R_PAR           reduce using rule 22 (lambda -> L_PAR R_PAR ARROW L_BRC program R_BRC .)
    COMMA           reduce using rule 22 (lambda -> L_PAR R_PAR ARROW L_BRC program R_BRC .)


state 47

    (23) lambda -> L_PAR arg_list R_PAR ARROW L_BRC program . R_BRC

    R_BRC           shift and go to state 48


state 48

    (23) lambda -> L_PAR arg_list R_PAR ARROW L_BRC program R_BRC .

    SEMI            reduce using rule 23 (lambda -> L_PAR arg_list R_PAR ARROW L_BRC program R_BRC .)
    PLUS            reduce using rule 23 (lambda -> L_PAR arg_list R_PAR ARROW L_BRC program R_BRC .)
    MINUS           reduce using rule 23 (lambda -> L_PAR arg_list R_PAR ARROW L_BRC program R_BRC .)
    MULTIPLY        reduce using rule 23 (lambda -> L_PAR arg_list R_PAR ARROW L_BRC program R_BRC .)
    DIVIDE          reduce using rule 23 (lambda -> L_PAR arg_list R_PAR ARROW L_BRC program R_BRC .)
    R_PAR           reduce using rule 23 (lambda -> L_PAR arg_list R_PAR ARROW L_BRC program R_BRC .)
    COMMA           reduce using rule 23 (lambda -> L_PAR arg_list R_PAR ARROW L_BRC program R_BRC .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for R_PAR in state 21 resolved as shift
